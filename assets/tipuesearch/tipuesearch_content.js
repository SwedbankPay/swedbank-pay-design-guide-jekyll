var tipuesearch = {"pages": [{
    "title": "After payment is completed",
    "text": "After paaaayment Payment is done? Great, here is what will happen now. First we’ll subtract the money from your account, then a wizard will attempt a grand spell to carry the money on the back of ants to transfer it to a safe place. A secret place. A place with a secret.",
    "tags": "",
    "url": "/checkout-more/after-payment.html"
  },{
    "title": "Swedbank Pay Checkout – After Payment",
    "text": "When the consumer has completed the entire Checkin and Payment Menu, you need to implement the relevant after-payment operations in your order system. Which these operations are and how they are executed is described below. Introduction Below is the final part of the sequence diagram illustrating how a capture operation is performed. sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;PaymentInstruments that support &lt;br&gt;Authorizations. end Operations Most payment instruments are two-phase payments – in which a successful payment order will result in an authorized transaction – that must be followed up by a capture or cancellation transaction in a later stage. One-phase payments like Swish are settled directly without the option to capture or cancel. For a full list of the available operations, see the techincal reference. Operation Description create-paymentorder-capture The second part of a two-phase transaction where the authorized amount is sent from the payer to the payee. It is possible to do a part-capture on a subset of the authorized amount. Several captures on the same payment are possible, up to the total authorization amount. create-paymentorder-cancel Used to cancel authorized and not yet captured transactions. If a cancellation is performed after doing a part-capture, it will only affect the not yet captured authorization amount. create-paymentorder-reversal Used to reverse a payment. It is only possible to reverse a payment that has been captured and not yet reversed. To identify the operations that are available we need to do a GET request against the URI of paymentorder.id: Request 1 2 GET /psp/paymentorders/ HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; The (abbreviated) response containing an updateorder, capture, cancellation, and reversal operation should look similar to the response below: Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 HTTP/1.1 200 OK Content-Type: application/json { \"paymentOrder\": { \"id\": \"/psp/paymentorders/\" }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"/psp/paymentorders/\", \"rel\": \"update-paymentorder-updateorder\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"/psp/paymentorders//captures\", \"rel\": \"create-paymentorder-capture\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"/psp/paymentorders//cancellations\", \"rel\": \"create-paymentorder-cancel\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"/psp/paymentorders//reversals\", \"rel\": \"create-paymentorder-reversal\", \"contentType\": \"application/json\" } ] } Field Type Description paymentorder object The payment order object. └➔ id string The relative URI and unique identifier of the paymentorder resource . Please read about URI Usage to understand how this and other URIs should be used in your solution. operations array The array of possible operations to perform, given the state of the payment order. Cancel If we want to cancel up to the total authorized (not captured) amount, we need to perform create-paymentorder-cancel against the accompanying href returned in the operations list. See the abbreviated request and response below: Request 1 2 3 4 5 6 7 8 9 10 11 POST /psp/paymentorders//cancellations HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"payeeReference\": \"ABC123\", \"description\": \"Cancelling parts of the total amount\" } } Required Field Type Description check transaction object The transaction object. check └➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details. check └➔ description string A textual description of why the transaction is cancelled. If the cancellation request succeeds, the response should be similar to the example below: Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/paymentorders/payments/\", \"cancellation\": { \"id\": \"/psp/paymentorders/payments//cancellations/\", \"transaction\": { \"id\": \"/psp/paymentorders/payments//transactions/\", \"type\": \"Cancel\", \"state\": \"Completed\", \"amount\": 5610, \"vatAmount\": 1122, \"description\": \"Cancelling parts of the authorized payment\", \"payeeReference\": \"AB832\" } } } Property Type Description payment string The relative URI of the payment this cancellation transaction belongs to. cancellation object The cancellation object, containing information about the cancellation transaction. └➔ id string The relative URI of the cancellation transaction. └➔ transaction object The transaction object, containing information about the current transaction. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was updated. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. └─➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. Reversal If we want to reverse a previously captured amount, we need to perform create-paymentorder-reversal against the accompanying href returned in the operations list. See the abbreviated request and response below: Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 POST /psp/paymentorders//reversals HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"description\": \"Reversal of captured transaction\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"ABC123\", \"receiptReference\": \"ABC122\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Required Field Type Description check transaction object The transaction object. check └➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. check └➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. check └➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   └➔ receiptReference string(30) A unique reference from the merchant system. It is used to supplement payeeReference as an additional receipt number. check └➔ description string Textual description of why the transaction is reversed. check └➔ orderItems array The array of items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things. orderItems is required in all requests. In capture requests it should only contain the items to be captured from the order. check └─➔ reference string A reference that identifies the order item. check └─➔ name string The name of the order item. check └─➔ type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w]* (a-zA-Z0-9_). Swedbank Pay may use this field for statistics.   └─➔ itemUrl string The URL to a page that can display the purchased item, product or similar.   └─➔ imageUrl string The URL to an image of the order item.   └─➔ description string The human readable description of the order item.   └─➔ discountDescription string The human readable description of the possible discount. check └─➔ quantity integer The 4 decimal precision quantity of order items being purchased. check └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is a free-text field and is used for your own book keeping. check └─➔ unitPrice integer The price per unit of order item, including VAT.   └─➔ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. If the reversal request succeeds, the response should be similar to the example below: Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/paymentorders/payments/\", \"reversals\": { \"id\": \"/psp/paymentorders/payments//cancellations/\", \"transaction\": { \"id\": \"/psp/paymentorders/payments//transactions/\", \"type\": \"Reversal\", \"state\": \"Completed\", \"amount\": 15610, \"vatAmount\": 3122, \"description\": \"Reversing the capture amount\", \"payeeReference\": \"ABC987\", \"receiptReference\": \"ABC986\" } } } Property Type Description payment string The relative URI of the payment this reversal transaction belongs to. reversals object The reversal object, containing information about the reversal transaction. └➔ id string The relative URI of the reversal transaction. └➔ transaction object The transaction object, containing information about the current transaction. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was updated. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. └─➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. In Invoice Payments payeereference is used as an invoice/receipt number. └➔ receiptReference string(30) A unique reference from the merchant system. It is used to supplement payeeReference as an additional receipt number. info Note that all of the operations Cancel, Capture and Reversal must be implemented. Back: Capture Next: Other Features",
    "tags": "",
    "url": "/checkout/after-payment.html"
  },{
    "title": "Swedbank Pay Checkout – Capture",
    "text": "Step 5: Capture the funds Capture can only be done on a payment with a successful authorized transaction, and if the authorization was not done on a one-phase payment instrument. Examples of one-phase payment instruments are Swish and Vipps, while payment instruments such as Credit Card are two-phase payments, requiring a Capture to be performed. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can later do more captures on the same payment up to the total authorization amount. This is done by requesting the order information from the server, to get the request link to perform the capture. With this, you can request the capture with the sum to capture, and get back the status. sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;PaymentInstruments that support &lt;br&gt;Authorizations. end To capture the authorized payment, we need to perform create-paymentorder-capture against the accompanying href returned in the operations list. See the abbreviated request and response below: Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 POST /psp/paymentorders//captures HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Required Field Type Description check transaction object The transaction object. check └➔ description string The description of the capture transaction. check └➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. check └➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. check └➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details. In Invoice Payments payeereference is used as an invoice/receipt number.   └➔ receiptReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. It is used to supplement payeeReference as an additional receipt number. check └➔ orderItems array The array of items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things. orderItems is required in all requests. In capture requests it should only contain the items to be captured from the order. check └─➔ reference string A reference that identifies the order item. check └─➔ name string The name of the order item. check └─➔ type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w]* (a-zA-Z0-9_). Swedbank Pay may use this field for statistics.   └─➔ itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ └─➔ imageUrl string The URL to an image of the order item.   └─➔ description string The human readable description of the order item.   └─➔ discountDescription string The human readable description of the possible discount. check └─➔ quantity integer The 4 decimal precision quantity of order items being purchased. check └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is a free-text field and is used for your own book keeping. check └─➔ unitPrice integer The price per unit of order item, including VAT.   └─➔ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check └─➔ reference string A reference that identifies the order item. check └─➔ name string The name of the order item. check └─➔ type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w]* (a-zA-Z0-9_). Swedbank Pay may use this field for statistics. ︎︎︎ └─➔ itemUrl string The URL to a page that can display the purchased item, such as a product page ︎︎︎ └─➔ imageUrl string The URL to an image of the order item. ︎︎︎ └─➔ description string The human readable description of the order item. ︎︎︎ └─➔ discountDescription string The human readable description of the possible discount. check └─➔ quantity decimal The 4 decimal precision quantity of order items being purchased. check └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check └─➔ unitPrice integer The price per unit of order item, including VAT. ︎︎︎ └─➔ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. check └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. If the capture succeeds, it should respond with something like the following: Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/paymentorders/payments/\", \"capture\": { \"id\": \"/psp/paymentorders/payments//captures/\", \"transaction\": { \"id\": \"/psp/paymentorders/payments//transactions/\", \"type\": \"Capture\", \"state\": \"Completed\", \"amount\": 15610, \"vatAmount\": 3122, \"description\": \"Capturing the authorized payment\", \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\" } } } Property Type Description payment string The relative URI of the payment this capture transaction belongs to. capture object The capture object, containing the information about the capture transaction. └➔ id string The relative URI of the created capture transaction. └➔ transaction object The transaction object, containing information about the current transaction. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was updated. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. └─➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. └─➔ description string A 40 character length textual description of the purchase. └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. └─➔ receiptReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. It is used to supplement payeeReference as an additional receipt number. Et voilà! Checkout should now be complete, the payment should be secure and everyone should be happy. But, sometimes you also need to implement the cancellation and reversal operations described below. Back: Payment Menu Next: After Payment",
    "tags": "",
    "url": "/checkout/capture.html"
  },{
    "title": "Swedbank Pay Checkout – Checkin",
    "text": "Step 1: Initiate session for consumer identification The payer will be identified with the consumers resource and will be persisted to streamline future Payment Menu processes. Payer identification is done through the initiate-consumer-session operation. Optional integration The response from the POST of consumer information contains a few operations. The combination of rel, method and contentType should give you a clue how the operation should be performed. The view-consumer-identification operation and its application/javascript content type gives us a clue that the operation is meant to be embedded in a &lt;script&gt; element in an HTML document. Request 1 2 3 4 5 6 7 8 9 10 POST /psp/consumers HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"operation\": \"initiate-consumer-session\", \"language\": \"sv-SE\", \"shippingAddressRestrictedToCountryCodes\" : [\"NO\", \"SE\", \"DK\"] } Required Field Type Description check operation string initiate-consumer-session, the operation to perform. check language string Selected language to be used in Checkin. Supported values are sv-SE, nb-NO or ee-EE. check shippingAddressRestrictedToCountryCodes string List of supported shipping countries for merchant. Using ISO-3166 standard. When the request has been sent, a response containing an array of operations that can be acted upon will be returned: Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 HTTP/1.1 200 OK Content-Type: application/json { \"token\": \"7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871\", \"operations\": [ { \"method\": \"GET\", \"rel\": \"redirect-consumer-identification\", \"href\": \"/consumers/sessions/7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"rel\": \"view-consumer-identification\", \"href\": \"/consumers/core/scripts/client/px.consumer.client.js?token=\", \"contentType\": \"application/javascript\" } ] } Field Type Description token string A session token used to initiate Checkout UI. operations array The array of operation objects to choose from, described in detail in the table below. └➔ rel string The relational name of the operation, used as a programmatic identifier to find the correct operation given the current state of the application. └➔ method string The HTTP method to use when performing the operation. └➔ contentType string The HTTP content type of the target URI. Indicates what sort of resource is to be found at the URI, how it is expected to be used and behave. └➔ href string The target URI of the operation. Step 2: Display Swedbank Pay Checkin module The response from the POST of consumer information contains a few operations. The combination of rel, method and contentType should give you a clue how the operation should be performed. The view-consumer-identification operation and its application/javascript content type gives us a clue that the operation is meant to be embedded in a &lt;script&gt; element in an HTML document. warning In our example we will focus on using the view-consumer-identification solution. The redirect-consumer-identification method redirects the user to Swedbank’s own site to handle the checkin and is used in other implementations. redirect-consumer-identification should only be used in test enviroments. It is not suitable for the production environment as there is no simple way of retrieving the consumerProfileRef. HTML 1 2 3 4 5 6 7 8 9 10 11 12 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Checkout is Awesome!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"checkin\"&gt;&lt;/div&gt; &lt;div id=\"payment-menu\"&gt;&lt;/div&gt; &lt;!-- Here you can specify your own javascript file --&gt; &lt;script src=\"&lt;Your-JavaScript-File-Here&gt;\"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; info The Checkin and Payment Menu components (the two &lt;iframe&gt; elements) must be separate (one must not replace the other). In the HTML, you only need to add two &lt;div&gt; elements to place the check-in and payment menu inside of. The JavaScript will handle the rest when it comes to handling the check-in and payment menu. JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 var request = new XMLHttpRequest(); request.addEventListener('load', function () { // We will assume that our own backend returns the // exact same as what SwedbankPay returns. var response = JSON.parse(this.responseText); var script = document.createElement('script'); // This assumes that the operations from the response of the POST from the // payment order is returned verbatim from the server to the Ajax: var operation = response.operations.find(function (o) { return o.rel === 'view-consumer-identification'; }); script.setAttribute('src', operation.href); script.onload = function () { payex.hostedView.consumer({ // The container specifies which id the script will look for // to host the checkin component container: 'checkin', onConsumerIdentified: function onConsumerIdentified(consumerIdentifiedEvent) { // consumerIdentifiedEvent.consumerProfileRef contains the reference // to the identified consumer which we need to pass on to the // Payment Order to initialize a personalized Payment Menu. console.log(consumerIdentifiedEvent); }, onShippingDetailsAvailable: function onShippingDetailsAvailable(shippingDetailsAvailableEvent) { console.log(shippingDetailsAvailableEvent); } }).open(); }; // Appending the script to the head var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Place in your own API endpoint here. request.open('POST', '&lt;Your-Backend-Endpoint-Here&gt;', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // In this example we'll send in all of the information mentioned before, // in the request to the endpoint. request.send(JSON.stringify({ operation: 'initiate-consumer-session', language: 'sv-SE', shippingAddressRestrictedToCountryCodes: ['NO', 'SE'] })); info Note that we add the script at the end of the body. This ensures that every element (like the container &lt;div&gt; elements) has loaded in before we try to access them with our script. With the scripts loading in after the entire page is loaded, we can access the &lt;div&gt; container that the Checkin will be hosted in. After that has all loaded, you should see something like this: As you can see, the payer’s information is pre-filled as provided by the initial POST. With a consumerProfileRef safely tucked into our pocket, the Checkin is complete and we can move on to Payment Menu. A complete overview of how the process of identifying the payer through Checkin is illustrated in the sequence diagram below. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(238, 112, 35, 0.05) note left of Payer: Checkin Payer -&gt;&gt;+ Merchant: Start Checkin Merchant -&gt;&gt;+ SwedbankPay: POST /psp/consumers deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel:view-consumer-identification ① deactivate SwedbankPay Merchant --&gt;&gt;- Payer: Show Checkin on Merchant Page Payer -&gt;&gt;+ Payer: Initiate Consumer Hosted View (open iframe) ② Payer -&gt;&gt;+ SwedbankPay: Show Consumer UI page in iframe ③ deactivate Payer SwedbankPay -&gt;&gt;- Payer: Consumer identification process activate Payer Payer -&gt;&gt;+ SwedbankPay: Consumer identification process deactivate Payer SwedbankPay --&gt;&gt;- Payer: show consumer completed iframe activate Payer Payer -&gt;&gt; Payer: EVENT: onConsumerIdentified (consumerProfileRef) ④ deactivate Payer end If a browser refresh is performed after the payer has checked in, the payment menu must be shown even though onConsumerIdentified is not invoked. Additional events during Checkin can also be implemented in the configuration object, such as onConsumerIdentified, onShippingDetailsAvailableand onBillingDetailsAvailable. Read more about these in the Checkin events section. Note on consumer data During this stage some consumer data is stored. Read more about our Data Protection Policy for details on which information we store and its duration. Back: Introduction Next: Payment Menu",
    "tags": "",
    "url": "/checkout/checkin.html"
  },{
    "title": "Creditting?",
    "text": "Don’t read this If you see this. It means you are credited.",
    "tags": "",
    "url": "/payments/credit.html"
  },{
    "title": "Checkout More",
    "text": "You’d like to checko out Great! Just check in first and we’ll get you sorted.",
    "tags": "",
    "url": "/checkout-more/"
  },{
    "title": "Secret payments",
    "text": "How we do secret payments We don’t.",
    "tags": "",
    "url": "/payments/secrets/"
  },{
    "title": "Payments",
    "text": "Woah bby Here we list a few details about payment",
    "tags": "",
    "url": "/payments/"
  },{
    "title": "Checkout – Features",
    "text": "All features view_list Payment orders When initiating a payment process arrow_forward description Description Initialize payment process containing the order arrow_forward settings Operations Initialize payment process containing the order arrow_forward http CompleteURL Initialize payment process containing the order arrow_forward autorenew Recurring Payments Initialize payment process containing the order arrow_forward shopping_basket Purchase Payments Initialize payment process containing the order arrow_forward attach_money Prices Initialize payment process containing the order arrow_forward construction Checkin Events Initialize payment process containing the order arrow_forward undo Callback Initialize payment process containing the order arrow_forward",
    "tags": "",
    "url": "/checkout/features/"
  },{
    "title": "Checkout – Introduction",
    "text": "Core implementation overview 01 Initiate session and display checkin module 15 min read arrow_forward 02 Create and display payment menu 15 min read arrow_forward 03 Capture the funds 10 min read arrow_forward Additional features remove_red_eye Features In this section you find various resources for Swedbank Pay’s API Platform. arrow_forward add After Payment Add After-payment operation to your order system arrow_forward developer_board Other Features See what other features you can implement for your checkout arrow_forward Swedbank Pay Checkout is a complete reimagination of the checkout experience, integrating seamlessly into the merchant website through highly customizable and flexible components. Visit our demoshop and try out Swedbank Pay Checkout for yourself! Swedbank Pay Checkout allows your customers to be identified with Swedbank Pay, enabling existing Swedbank Pay Checkout users to pay with their favorite payment methods in just a few simple steps.",
    "tags": "",
    "url": "/checkout/"
  },{
    "title": "Gift Cards – Introduction",
    "text": "Overview The Gift Cards API is a gateway for receiving gift card payments through our system. It’s ment to simplify external integration for prepaid gift cards. Prerequisites An agreement which includes Swedbank Pay Payments. Gift Card Credentials from Swedbank Pay retrieved from the Swedbank Pay Admin (VAS CAM). Implementation For implementation of the Gift Cards API, please read through the following documentation: Test Client Swagger Operations",
    "tags": "",
    "url": "/gift-cards/"
  },{
    "title": "Home",
    "text": "Text can be bold, italic, or strikethrough. External absolute full link External protocol relative link [Internal absolute full link][internal-absolute-full-link] [Internal explicit relative link][explicit-relative-link] [Internal implicit relative link][implicit-relative-link] [Internal absolute link][internal-absolute-link] There should be whitespace between paragraphs. There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. Header 2 This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. This is a blockquote following a header. When something is important enough, you do it even if the odds are not in your favor. Header 3 JavaScript code with syntax highlighting. 1 2 3 4 var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } HTTP request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 POST /psp/consumers HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"operation\": \"initiate-consumer-session\", \"msisdn\": \"+4798765432\", \"email\": \"olivia.nyhuus@example.com\", \"consumerCountryCode\": \"NO\", \"nationalIdentifier\": { \"socialSecurityNumber\": \"26026708248\", \"countryCode\": \"NO\" } } Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/\", \"authorization\": { \"direct\": true, \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"issuingBank\": \"Utl. Visa\", \"paymentToken\": \"\", \"maskedPan\": \"454778******3329\", \"expiryDate\": \"12/2020\", \"panToken\": \"cca2d98d-8bb3-4bd6-9cf3-365acbbaff96\", \"panEnrolled\": true, \"acquirerTransactionTime\": \"0001-01-01T00:00:00Z\", \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2020-03-10T13:15:01.9586254Z\", \"updated\": \"2020-03-10T13:15:02.0493818Z\", \"type\": \"Authorization\", \"state\": \"AwaitingActivity\", \"number\": 70100366758, \"amount\": 4201, \"vatAmount\": 0, \"description\": \"Test transaction\", \"payeeReference\": \"1583846100\", \"isOperational\": true, \"operations\": [ { \"method\": \"GET\", \"href\": \"https://api.stage.payex.com/psp/creditcard/confined/payments/authorizations/authenticate/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authentication\" } ] } } } JSON 1 2 3 4 5 6 7 8 9 10 { \"operation\": \"initiate-consumer-session\", \"msisdn\": \"+4798765432\", \"email\": \"olivia.nyhuus@example.com\", \"consumerCountryCode\": \"NO\", \"nationalIdentifier\": { \"socialSecurityNumber\": \"26026708248\", \"countryCode\": \"NO\" } } Here’s some &lt;inline&gt; { \"code\": true } that should .be { highlighted: according; } to their language. Header 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 Here’s a nice, striped table. head1 head two three ok good swedish fish nice out of stock good and plenty nice ok good oreos hmm ok good zoute drop yumm Mermaid sequenceDiagram participant Merchant participant SwedbankPay activate SwedbankPay SwedbankPay-&gt;&gt;Merchant: POST &lt;callbackUrl&gt; activate Merchant note right of SwedbankPay: Callback POST by SwedbankPay Merchant-&gt;&gt;SwedbankPay: Callback response deactivate Merchant deactivate SwedbankPay activate Merchant Merchant-&gt;&gt;SwedbankPay: GET &lt;payment instrument&gt; payment note left of Merchant: First API request activate SwedbankPay SwedbankPay--&gt;&gt;Merchant: payment resource deactivate SwedbankPay deactivate Merchant Alerts This is a standard alert. check_circle This is a successful alert. info_outline Informational alert This is an informational alert with &lt;markdown/&gt;. warning { \"warning\": \"alert\" } This is a warning alert with &lt;markdown/&gt;. Cards credit_card Default This is a default card arrow_forward settings SDK This is a .dx-card-sdk card arrow_forward build module This is a .dx-card-module card. This also has outlined icon arrow_forward 01 Horizontal This is a dx-card-horizontal card. Icons used with this card are just numbers arrow_forward Jumbotron PayEx Checkout is a complete reimagination of the checkout experience, integrating seamlessly into the merchant website through highly customizable and flexible components. Visit our demoshop and try out PayEx Checkout for yourself! Iterator Next Previous Go back Go forward There’s a horizontal rule below this Here is an unordered list Item foo Item bar Item baz Item zip And an ordered list Item one Item two Item three Item four And a nested list level 1 item level 2 item level 2 item level 3 item level 3 item level 1 item level 2 item level 2 item level 2 item level 1 item level 2 item level 2 item level 1 item Small image Large image Definition lists can be used with HTML syntax Name Godzilla Born 1952 Birthplace Japan Color Green Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. The final element. Emoji support :+1: :heavy_check_mark: :fire: 💡 :unicorn: Material design icons check line_weight gavel visibility work alarm_on PlantUML clientappdb More complex example: PayerPayerMerchantMerchantSwedbankPaySwedbankPay3rdParty3rdPartyCheckinStart CheckinPOST /psp/consumersrel:view-consumer-identification ①Show Checkin on Merchant PageInitiate Consumer Hosted View (open iframe) ②Show Consumer UI page in iframe ③Consumer identification processConsumer identification processshow consumer completed iframeEVENT: onConsumerIdentified (consumerProfileRef) ④Payment MenuInitiate PurchasePOST /psp/paymentorders (paymentUrl, consumerProfileRef)rel:view-paymentorderDisplay Payment Menu on Merchant PageInitiate Payment Menu Hosted View (open iframe)Show Payment UI page in iframeDo payment logicDo payment logicopt[Consumer perform payment out of iFrame]Redirect to 3rd partyRedirect to 3rdPartyUrl URLRedirect back to paymentUrl (merchant)Initiate Payment Menu Hosted View (open iframe)Show Payment UI page in iframePayment statusEvent: onPaymentCompletedCheck payment statusGET &lt;paymentorder.id&gt;rel: paid-paymentorderopt[Get PaymentOrder Details (if paid-paymentorder operation exist)]GET rel: paid-paymentorderPayment Detailsopt[If payment is failed]Event: OnPaymentFailedCheck payment statusGET {paymentorder.id}rel: failed-paymentorderopt[Get PaymentOrder Details (if failed-paymentorder operation exist)]GET rel: failed-paymentorderPayment DetailsShow Purchase completeopt[PaymentOrder Callback (if callbackUrls is set)]POST Payment CallbackCapturerel:create-paymentorder-captureCapture statusCapture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;PaymentInstruments that support &lt;br&gt;Authorizations. [internal-absolute-full-link]: [explicit-relative-link]: ./page1 [implicit-relative-link]: page1 [internal-absolute-link]: /page1",
    "tags": "",
    "url": "/"
  },{
    "title": "Invoicing",
    "text": "Invoices It’s a weird thing this invoice, some like it, most dont. I have no particularly strong feeling seeing that I am just text on a page.",
    "tags": "",
    "url": "/payments/invoice.html"
  },{
    "title": "Gift Cards – Operations",
    "text": "Gift card resource For security and headers see Security. Get New Gift Card Request 1 2 3 4 5 6 7 8 9 10 11 POST /api/payments/gift-card/get-new-gift-card HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"amount\": 10000, \"email\": \"example@exampleprovider.com\", \"msisdn\": 99999999, \"productId\": 7854 } Required Field Type Description check amount integer Total amount of Payment (in cents), ie. 100Kr -&gt; 10000. If amount is 0 no deposit is made.   email string customers email.   msisdn string customers mobile number.   productId string A human readable and descriptive text of the error. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 HTTP/1.1 200 OK Content-Type: application/json { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"accountSummaryGiftCard\": { \"accountKey\": 7013360000000001000, \"balance\": 10000, \"cvc\": 123, \"expiryDate\": \"2020-01-15\" }, \"paymentId\": 4526987 } Pre Deposit Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 POST /api/payments/gift-card/pre-deposit HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"amount\": 10000, \"currency\": \"NOK\", \"description\": \"string\", \"orderRef\": \"UUID\", \"simpleAccountIdentifier\": { \"accountKey\": 7013360000000001000, \"cvc\": 123, \"expiryDate\": \"12/20\" }, \"transactionRef\": \"UUID\" } Required Field Type Description check amount integer Total amount of Payment (in cents), ie. 100Kr -&gt; 10000. If amount is 0 no deposit is made. check currency string Currency for Payment.   description string Payment description. check orderRef string Merchant ref, Unique from merchant per session.   transactionRef string Unique ID for each transaction. check SimpleAccountIdentifier Object   check accountKey string Primary Account Number (PAN) for card/account. This is mandatory if ‘track2’ is not present.   cvc string Card Verification Code.   expiryDate string Expiry date on card (only applicable for PaymentInstrumentType ‘creditcard’) where expiry date is printed on card. Format MM/YY. Response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"balance\": 10000, \"paymentId\": 4526987 }",
    "tags": "",
    "url": "/gift-cards/operations.html"
  },{
    "title": "Swedbank Pay Checkout – Other Features",
    "text": "After a successful integration, it may be worth investigating which other features are available in Swedbank Pay Checkout. They are listed on this very page. Payment Orders The paymentorders resource is used when initiating a payment process through Payment Menu and Swedbank Pay Checkout. The payment order is a container for the payment instrument object selected by the payer. This will generate a payment that is accessed through the sub-resources payments and currentPayment. Request 1 2 3 4 GET /psp/paymentorders// HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders//urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders//payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders//settings\" }, \"payers\": { \"id\": \"/psp/paymentorders//payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders//orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders//metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders//payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders//currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"/psp/paymentorders/\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] } Field Type Description paymentorder object The payment order object. └➔ id string The relative URI and unique identifier of the paymentorder resource . Please read about URI Usage to understand how this and other URIs should be used in your solution. └➔ created string The ISO-8601 date of when the payment order was created. └➔ updated string The ISO-8601 date of when the payment order was updated. └➔ operation string Purchase └➔ state string Ready, Pending, Failed or Aborted. Indicates the state of the payment order. Does not reflect the state of any ongoing payments initiated from the payment order. This field is only for status display purposes. └➔ currency string The currency of the payment order. └➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. └➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. └➔ description string(40) A 40 character length textual description of the purchase. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string sv-SE, nb-NO or ee-EE. └➔ urls string The URI to the urls resource where all URIs related to the payment order can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment order can be retrieved. └➔ payers string The URI to the payers resource where information about the payee of the payment order can be retrieved. └➔ orderItems string The URI to the orderItems resource where information about the order items can be retrieved. └➔ metadata string The URI to the payments resource where information about all underlying payments can be retrieved. └➔ payments string The URI to the payments resource where information about all underlying payments can be retrieved. └➔ currentPayment string The URI to the currentPayment resource where information about the current – and sole active – payment can be retrieved. └➔ operations array The array of possible operations to perform, given the state of the payment order. See Operations for details. Creating a payment order To create a payment order, you perform a POST request towards the paymentorders resource: Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 POST /psp/paymentorders HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"generateRecurrenceToken\": false, \"restrictedToInstruments\": [\"CreditCard\", \"Invoice\"], \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditoons.pdf\" }, \"payeeInfo\": { \"payeeId\": \"\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\" }, \"payer\": { \"consumerProfileRef\": \"\", \"email\": \"olivia.nyhuus@payex.com\", \"msisdn\": \"+4798765432\", \"workPhoneNumber\" : \"+4787654321\", \"homePhoneNumber\" : \"+4776543210\" }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"I1\", \"name\": \"InvoiceFee\", \"type\": \"PAYMENT_FEE\", \"class\": \"Fees\", \"description\": \"Fee for paying with Invoice\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 1900, \"vatPercent\": 0, \"amount\": 1900, \"vatAmount\": 0, \"restrictedToInstruments\": [ \"Invoice-PayExFinancingSe\", \"Invoice-CampaignInvoiceSe\" ] } ], \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Required Field Type Description check paymentorder object The payment order object. check └➔ operation string The operation that the payment order is supposed to perform. check └➔ currency string The currency of the payment. check └➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. check └➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. check └➔ description string The description of the payment order. check └➔ userAgent string The user agent of the payer. check └➔ language string The language of the payer. check └➔ generateRecurrenceToken bool Determines if a recurrence token should be generated. A recurrence token is primarily used to enable future recurring payments - with the same token - through server-to-server calls. Default value is false.   └➔ restrictedToInstruments array CreditCard, Invoice, Vipps, Swish and/or CreditAccount. Invoice supports the subtypes PayExFinancingNo, PayExFinancingSe and PayMonthlyInvoiceSe, separated by a dash, e.g.; Invoice-PayExFinancingNo. Limits the options available to the consumer in the payment menu. Default value is all supported payment instruments. Usage of this field requires an agreement with Swedbank Pay. check └➔ urls object The urls object, containing the URLs relevant for the payment order. check └─➔ hostUrls array The array of URIs valid for embedding of Swedbank Pay Hosted Views. check └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled, either by the payer or by the merchant trough an abort request of the payment or paymentorder.   └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the payment. check └─➔ callbackUrl string The URI to the API endpoint receiving POST requests on transaction activity related to the payment order. check └─➔ termsOfServiceUrl string The URI to the terms of service document the payer must accept in order to complete the payment. Note that this field is not required unless generateReferenceToken or generateRecurrenceToken is also submitted in the request. This is the Merchants, not the Swedbank Pay Terms of Service. HTTPS is a requirement. check └➔ payeeInfo string The payeeInfo object, containing information about the payee. check └─➔ payeeId string The ID of the payee, usually the merchant ID. check └─➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The name of the payee, usually the name of the merchant.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ subsite String(40) The subsite field can be used to perform [split settlement][split-settlement] on the payment. The subsites must be resolved with Swedbank Pay [reconciliation][settlement-and-reconciliation] before being used.   └➔ payer object The payer object containing information about the payer relevant for the payment order. ︎︎︎ └─➔ consumerProfileRef string The consumer profile reference as obtained through [initiating a consumer session][initiate-consumer-session].   └─➔ email string The e-mail address of the payer. Will be used to prefill the Checkin as well as on the payer’s profile, if not already set.   └─➔ msisdn string The mobile phone number of the Payer. Will be prefilled on Checkin page and used on the payer’s profile, if not already set. The mobile number must have a country code prefix and be 8 to 15 digits in length.   └─➔ workPhoneNumber string The work phone number of the payer. Optional (increased chance for frictionless flow if set)   └─➔ homePhoneNumber string The home phone number of the payer. Optional (increased chance for frictionless flow if set) check └➔ orderItems array The array of items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things. orderItems is required in all requests. In capture requests it should only contain the items to be captured from the order. check └─➔ reference string A reference that identifies the order item. check └─➔ name string The name of the order item. check └─➔ type string PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE DISCOUNT, VALUE_CODE or OTHER. The type of the order item. PAYMENT_FEE is the amount you are charged with when you are paying with invoice. The amount can be defined in the amount field below. check └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w]* (a-zA-Z0-9_). Swedbank Pay may use this field for statistics.   └─➔ itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ └─➔ imageUrl string The URL to an image of the order item.   └─➔ description string A 40 character length textual description of the purchase.   └─➔ discountDescription string The human readable description of the possible discount. check └─➔ quantity integer The 4 decimal precision quantity of order items being purchased. check └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is a free-text field and is used for your own book keeping. check └─➔ unitPrice integer The price per unit of order item, including VAT.   └─➔ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check └─➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. check └─➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged.   └➔ riskIndicator array This optional object consist of information that helps verifying the payer. Providing these fields decreases the likelyhood of having to promt for 3-D Secure authenticaiton of the payer when they are authenticating the purchacse.   └─➔ deliveryEmailAdress string For electronic delivery, the email address to which the merchandise was delivered. Providing this field when appropriate decreases the likelyhood of a 3-D Secure authentication for the payer.   └─➔ deliveryTimeFrameIndicator string Indicates the merchandise delivery timeframe. 01 (Electronic Delivery) 02 (Same day shipping) 03 (Overnight shipping) 04 (Two-day or more shipping)   └─➔ preOrderDate string For a pre-ordered purchase. The expected date that the merchandise will be available. Format: YYYYMMDD   └─➔ preOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)   └─➔ shipIndicator string Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address) 02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes) 06 (Travel and Event tickets, not shipped) 07 (Other, e.g. gaming, digital service)   └─➔ giftCardPurchase bool true if this is a purchase of a gift card.   └─➔ reOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)   └➔ pickUpAddress object If shipIndicator set to 04, then prefill this with the payers pickUpAddress of the purchase to decrease the risk factor of the purchase.   └─➔ name string If shipIndicator set to 04, then prefill this with the payers name of the purchase to decrease the risk factor of the purchase.   └─➔ streetAddress string If shipIndicator set to 04, then prefill this with the payers streetAddress of the purchase to decrease the risk factor of the purchase.   └─➔ coAddress string If shipIndicator set to 04, then prefill this with the payers coAddress of the purchase to decrease the risk factor of the purchase.   └─➔ city string If shipIndicator set to 04, then prefill this with the payers city of the purchase to decrease the risk factor of the purchase.   └─➔ zipCode string If shipIndicator set to 04, then prefill this with the payers zipCode of the purchase to decrease the risk factor of the purchase.   └─➔ countryCode string If shipIndicator set to 04, then prefill this with the payers countryCode of the purchase to decrease the risk factor of the purchase. Description The description field is a 40 character length textual summary of the purchase. It is needed to specify what payer is actually purchasing. Below you will find an abbreviated Card Payments Purchase request. As you can see the description field is set to be test purchase - orderNumber28749347 in the the code example. The images below will show you the payment UI for the Redirect and Seamless View scenario. info Notice that for Redirect, the description will be shown as test purchase - orderNumber28749347, as set in the code example. For the Seamless View scenario, the description is not shown in the payment window, but it is still required in the initial request. Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 POST /psp/creditcard/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [{ \"type\": \"CreditCard\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"test purchase - orderNumber28749347\", \"generatePaymentToken\": false, \"generateRecurrenceToken\": false, \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\": \"hostUrls\": [\"https://example.com\"], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"https://example.com/payment-terms.pdf\", } ] } Response The response given when creating a payment order is equivalent to a GET request towards the paymentorders resource, as displayed above URLs When creating a Payment Order, the urls field of the paymentOrder contains the related URIs, including where the consumer gets redirected when going forward with or cancelling a payment session, as well as the callback URI that is used to inform the payee (merchant) of changes or updates made to underlying payments or transaction. Required Field Type Description check ︎︎︎︎︎ hostUrls array The array of URIs valid for embedding of Swedbank Pay Hosted Views. check completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. check termsOfServiceUrl string The URI to the terms of service document the payer must accept in order to complete the payment. Note that this field is not required unless generateReferenceToken or generateRecurrenceToken is also submitted in the request. This is the Merchants, not the Swedbank Pay Terms of Service. HTTPS is a requirement.   cancelUrl string The URI to redirect the payer to if the payment is canceled, either by the payer or by the merchant trough an abort request of the payment or paymentorder.   paymentUrl string The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the payment.   callbackUrl string The URI to the API endpoint receiving POST requests on transaction activity related to the payment order.   logoUrl string The URI to the logo that will be displayed on redirect pages. HTTPS is a requirement. Payment Url For our Seamless Views, the field called paymentUrl will be used when the consumer is redirected out of the Seamless View (the iframe). The consumer is redirected out of frame when selecting the payment instrument Vipps or in the 3-D Secure verification for Credit Card Payments. The URL should represent the page of where the Payment Order Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the Seamless View was added to in order to initiate the payment process. info Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment Order as the one that initiated the payment process originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. paymentUrl is used by the Seamless View flow and must be used for WebView-based app implementations. Some payment instruments only work when owning the full browser page (no use of &lt;iframe&gt;), this will be solved by doing a full browser (top frame) redirect out of the Seamless View. 3-D Secure requires this, for example. For mobile flows, some payment instruments work best when app-to-app switching is enabled and handled automatically (Swish, Vipps etc). To solve this, it is important that the third party app or site understand where to redirect the consumer back to after the flow on their end is completed. The paymentUrl is the URL Swedbank Pay will provide to the third party for handling the redirect back to your site or app. When receiving the consumer back on the paymentUrl either in an app or web page it is important to restore the Seamless View to let the payment finalize the flow. For in-app it is important that you either implement the onPaymentCompleted event or let the Seamless View redirect to the completeUrl before intercepting the WebView. If you intercept the WebView when the consumer device is redirected to the paymentUrl it can lead to issues. If you want to handle payment errors in your own code, you should also subscribe to other events provided by the Seamless View JavaScript and shut down the Seamless View if any of these events occur. Events to subscribe to for full control over the payment flow are: Event Description onError Will trigger any time a system error occur from the JavaScript. onPaymentFailed will call registrered endpoint if provided. If not subscribed to will redirect to conpleteUrl onPaymentCanceled will be called if the payment is aborted by the consumer or triggered by you with the Abort command on the payment onPaymentTransactionFailed this will trigger if one payment attempt failed. Standard functionality are to let the consumer be able to retry the payment from the payment page. When implementing the Seamless View flow into a WebView in your mobile app, you should use a custom scheme or Universal Link in the paymentUrl for handling automatic switching between your app and the payment app on the mobile device. URLs Resource It is possible to perform a GET request on the urls resource to retrieve its contents. Request 1 2 3 4 GET /psp/paymentorders//urls/ HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": \"/psp/payments/\", \"urls\": { \"id\": \"/psp/payments//urls\", \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-complete\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"http://api.example.com/payment-callback\", \"logoUrl\": \"http://merchant.com/path/to/logo.png\", \"termsOfServiceUrl\": \"http://merchant.com/path/to/tems\" } } Field Type Description paymentorder string The relative URI and unique identifier of the payment resource this urls belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. urls object The URLs object. └➔ id string The relative URI and unique identifier of the urls resource this urls belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. └➔ hostsUrl string An array of the whitelisted URIs that are allowed as parents to a Hosted View, typically the URI of the web shop or similar that will embed a Hosted View within it. └➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. └➔ cancelUrl string The URI to redirect the payer to if the payment is canceled, either by the payer or by the merchant trough an abort request of the payment or paymentorder. └➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the payment. └➔ callbackUrl string The URI that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details. └➔ logoUrl string The URI that will be used for showing the customer logo. Must be a picture with at most 50px height and 400px width. └➔ termsOfServiceUrl string The URI to the terms of service document the payer must accept in order to complete the payment. Note that this field is not required unless generateReferenceToken or generateRecurrenceToken is also submitted in the request. This is the Merchants, not the Swedbank Pay Terms of Service. HTTPS is a requirement. Order Items The orderItems field of the paymentOrder is an array containing the items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things. orderItems is required in all requests. It should be specified on both payment order creation as well as on Capture. Required Field Type Description check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, DISCOUNT, VALUE_CODE, or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w]* (a-zA-Z0-9_). Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, such as a product page   imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity decimal The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. check vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. Items The items field of the paymentOrder is an array containing items that will affect how the payment is performed. Required Field Type Description   creditCard object The credit card object.   └➔ rejectDebitCards bool true if debit cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.   └➔ rejectDebitCards bool true if debit cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.   └➔ rejectCreditCards bool true if credit cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.   └➔ rejectConsumerCards bool true if consumer cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.   └➔ rejectCorporateCards bool true if corporate cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.   invoice object The invoice object.   └➔ feeAmount integer The fee amount in the lowest monetary unit to apply if the consumer chooses to pay with invoice.   swish object The swish object.   └➔ enableEcomOnly bool true to only enable Swish on ecommerce transactions. The paymentOrders resource utilize several sub-resources, relating to underlying payments, the current payment active, payers and URLs. Common sub-resources like payeeinfo, that are structurally identical for both payments and payments orders, are described in the Payment Resources section. Operations When a payment order resource is created and during its lifetime, it will have a set of operations that can be performed on it. The state of the payment order resource, what the access token is authorized to do, the chosen payment instrument and its transactional states, etc. determine the available operations before the initial purchase. A list of possible operations and their explanation is given below. Operations 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/\", } \"operations\": [ { \"method\": \"PATCH\", \"href\": \"/psp/paymentorders/\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"PATCH\", \"href\": \"/psp/paymentorders/\", \"rel\": \"update-paymentorder-updateorder\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" }, { \"method\": \"POST\", \"href\": \"/psp/paymentorders//captures\", \"rel\": \"create-paymentorder-capture\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"/psp/paymentorders//cancellations\", \"rel\": \"create-paymentorder-cancel\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"/psp/paymentorders//reversals\", \"rel\": \"create-paymentorder-reversal\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"/psp/paymentorders//paid\", \"rel\": \"paid-paymentorder\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"/psp/paymentorders//failed\", \"rel\": \"failed-paymentorder\", \"contentType\": \"application/problem+json\" } ] } Field Type Description href string The target URI to perform the operation against. rel string The name of the relation the operation has to the current resource. method string GET, PATCH, POST, etc. The HTTP method to use when performing the operation. contentType string The HTTP content type of the resource referenced in the href field. The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-paymentorder-abort Aborts the payment order before any financial transactions are performed. update-paymentorder-updateorder Updates the order with a change in the amount and/or vatAmount. redirect-paymentorder Contains the URI that is used to redirect the consumer to the Swedbank Pay Payments containing the Payment Menu. view-paymentorder Contains the JavaScript href that is used to embed the Payment Menu UI directly on the webshop/merchant site. create-paymentorder-capture The second part of a two-phase transaction where the authorized amount is sent from the payer to the payee. It is possible to do a part-capture on a subset of the authorized amount. Several captures on the same payment are possible, up to the total authorization amount. create-paymentorder-cancel Used to cancel authorized and not yet captured transactions. If a cancellation is performed after doing a part-capture, it will only affect the not yet captured authorization amount. create-paymentorder-reversal Used to reverse a payment. It is only possible to reverse a payment that has been captured and not yet reversed. paid-paymentorder Returns the information about a paymentorder that has the status paid. failed-paymentorder Returns the information about a paymentorder that has the status failed. CompleteUrl This URL will be used by Swedbank Pay when a payment is Completed or Failed. If your integration subscribes to the onPaymentCompleted and possibly the onPaymentFailed event, no redirect or use of the completeUrl will take place. But if you do not have any event handler for the onPaymentCompleted event, the Swedbank Pay JavaScript will perform an HTTP redirect in the top frame to the completeUrl. You will still need to do a GET request on the payment resource to find the final status (Completed or Failed). View Payment Order The view-paymentorder operation contains the URI of the JavaScript that needs to be set as a script element’s src attribute, either client-side through JavaScript or server-side in HTML as shown below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Checkout is Awesome!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"checkout\"&gt;&lt;/div&gt; &lt;script src=\"/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=&amp;culture=nb-NO\"&gt;&lt;/script&gt; &lt;script language=\"javascript\"&gt; payex.hostedView.paymentMenu({ container: 'checkout', culture: 'nb-NO', onPaymentCompleted: function(paymentCompletedEvent) { console.log(paymentCompletedEvent); }, onPaymentFailed: function(paymentFailedEvent) { console.log(paymentFailedEvent); }, onPaymentCreated: function(paymentCreatedEvent) { console.log(paymentCreatedEvent); }, onPaymentToS: function(paymentToSEvent) { console.log(paymentToSEvent); }, onPaymentMenuInstrumentSelected: function(paymentMenuInstrumentSelectedEvent) { console.log(paymentMenuInstrumentSelectedEvent); }, onError: function(error) { console.error(error); }, }).open(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Update Order Change amount and vat amount on a payment order. If you implement UpdateOrder you need to refresh() the Payment Menu front end so the new amount is shown to the end customer. Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 PATCH /psp/paymentorders/ HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"operation\": \"UpdateOrder\", \"amount\": 1500, \"vatAmount\": 375, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/shop/products/1234\", \"imageUrl\": \"https://example.com/products/product1.jpg\", \"description\": \"Product description\", \"discountDescription\": \"Volume discount\", \"quantity\": 351.3514, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product description\", \"quantity\": 9876.1531, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 Response HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders//urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders//payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders//settings\" }, \"payers\": { \"id\": \"/psp/paymentorders//payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders//orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders//metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders//payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders//currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"/psp/paymentorders/\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] } The response given when changing a payment order is equivalent to a GET request towards the paymentorders resource, as displayed above. info After updating the Payment Order, remember to call .refresh() on the Payment Menu in JavaScript. Abort To abort a payment order, perform the update-paymentorder-abort operation that is returned in the payment order response. You need to include the following in the request body: Request 1 2 3 4 5 6 7 8 9 10 11 PATCH /psp/paymentorders/ HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"operation\": \"Abort\", \"abortReason\": \"CancelledByConsumer\" } } Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 Response HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders//urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders//payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders//settings\" }, \"payers\": { \"id\": \"/psp/paymentorders//payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders//orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders//metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders//payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders//currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"/psp/paymentorders/\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] } The response given when aborting a payment order is equivalent to a GET request towards the paymentorders resource, as displayed above, with its state set to Aborted. Cancel If we want to cancel up to the total authorized (not captured) amount, we need to perform create-paymentorder-cancel against the accompanying href returned in the operations list. See the abbreviated request and response below: Request 1 2 3 4 5 6 7 8 9 10 11 POST /psp/paymentorders//cancellations HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"payeeReference\": \"ABC123\", \"description\": \"Cancelling parts of the total amount\" } } Required Field Type Description check transaction object The transaction object. check └➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details. check └➔ description string A textual description of why the transaction is cancelled. If the cancellation request succeeds, the response should be similar to the example below: Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/paymentorders/payments/\", \"cancellation\": { \"id\": \"/psp/paymentorders/payments//cancellations/\", \"transaction\": { \"id\": \"/psp/paymentorders/payments//transactions/\", \"type\": \"Cancel\", \"state\": \"Completed\", \"amount\": 5610, \"vatAmount\": 1122, \"description\": \"Cancelling parts of the authorized payment\", \"payeeReference\": \"AB832\" } } } Property Type Description payment string The relative URI of the payment this cancellation transaction belongs to. cancellation object The cancellation object, containing information about the cancellation transaction. └➔ id string The relative URI of the cancellation transaction. └➔ transaction object The transaction object, containing information about the current transaction. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was updated. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. └─➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. Reversal If we want to reverse a previously captured amount, we need to perform create-paymentorder-reversal against the accompanying href returned in the operations list. See the abbreviated request and response below: Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 POST /psp/paymentorders//reversals HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"description\": \"Reversal of captured transaction\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"ABC123\", \"receiptReference\": \"ABC122\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Required Field Type Description check transaction object The transaction object. check └➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. check └➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. check └➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   └➔ receiptReference string(30) A unique reference from the merchant system. It is used to supplement payeeReference as an additional receipt number. check └➔ description string Textual description of why the transaction is reversed. check └➔ orderItems array The array of items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things. orderItems is required in all requests. In capture requests it should only contain the items to be captured from the order. check └─➔ reference string A reference that identifies the order item. check └─➔ name string The name of the order item. check └─➔ type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w]* (a-zA-Z0-9_). Swedbank Pay may use this field for statistics.   └─➔ itemUrl string The URL to a page that can display the purchased item, product or similar.   └─➔ imageUrl string The URL to an image of the order item.   └─➔ description string The human readable description of the order item.   └─➔ discountDescription string The human readable description of the possible discount. check └─➔ quantity integer The 4 decimal precision quantity of order items being purchased. check └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is a free-text field and is used for your own book keeping. check └─➔ unitPrice integer The price per unit of order item, including VAT.   └─➔ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. If the reversal request succeeds, the response should be similar to the example below: Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/paymentorders/payments/\", \"reversals\": { \"id\": \"/psp/paymentorders/payments//cancellations/\", \"transaction\": { \"id\": \"/psp/paymentorders/payments//transactions/\", \"type\": \"Reversal\", \"state\": \"Completed\", \"amount\": 15610, \"vatAmount\": 3122, \"description\": \"Reversing the capture amount\", \"payeeReference\": \"ABC987\", \"receiptReference\": \"ABC986\" } } } Property Type Description payment string The relative URI of the payment this reversal transaction belongs to. reversals object The reversal object, containing information about the reversal transaction. └➔ id string The relative URI of the reversal transaction. └➔ transaction object The transaction object, containing information about the current transaction. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was updated. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. └─➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. In Invoice Payments payeereference is used as an invoice/receipt number. └➔ receiptReference string(30) A unique reference from the merchant system. It is used to supplement payeeReference as an additional receipt number. Transactions A payment contains sub-resources in the form of transactions. Most operations performed on a payment ends up as a transaction. The different types of operations that alter the state of the payment by creating a transaction is described below. The transactions resource will list the transactions (one or more) on a specific payment. Request 1 2 3 4 GET /psp/paymentorders/payments//transactions HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json The transaction resource contains information about the transaction transaction made against a paymentorders payment. You can return a specific transaction transaction by performing a GET request towards the specific transaction’s id. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/paymentorders/payments/\", \"transactions\": { \"id\": \"/psp/paymentorders/payments//transactions\", \"transactionList\": [{ \"id\": \"/psp/paymentorders/payments//transactions/\", \"transaction\": { \"id\": \"/psp/paymentorders/payments//transactions/\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Transaction\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Field Type Required   payment string The relative URI and unique identifier of the payment resource this transactions belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution.   transactions object The current transactions resource.   └➔ id string The relative URI and unique identifier of the transactions resource this transactions belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution.   └➔ transactionList array The array of transaction transaction objects.   └➔ transactionList[] object The transaction transaction object described in the transaction resource below.   └─➔ id string The relative URI and unique identifier of the transaction resource this transactions belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution.   └─➔ created string The ISO-8601 date and time of when the transaction was created.   └─➔ updated string The ISO-8601 date and time of when the transaction was updated.   └─➔ type string Indicates the transaction type.   └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction.   └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead.   └─➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK.   └─➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged.   └─➔ description string A 40 character length textual description of the purchase.   └─➔ payeeReference string A unique reference for the transaction.   └─➔ failedReason string The human readable explanation of why the payment failed.   └─➔ isOperational bool true if the transaction is operational; otherwise false.   └─➔ operations array The array of operations that are possible to perform on the transaction in its current state.   Transaction The transaction resource contains the generic details of a transaction on a specific payment. When a transaction is created it will have one of three states: Initialized - if there is some error where the source is undeterminable (network failure, etc), the transaction will remain Initialized. The corresponding state of the payment order will in this case be set to pending. No further transactions can be created. Completed - if everything went ok the transaction will follow through to completion. Failed - if the transaction has failed (i.e. a denial from the acquiring bank) it is possible to retry (i.e the consumer tries using another credit card) up to a maximum amount of retries (in that case which the payment order gets the state failed as well). Request 1 2 3 4 GET /psp/paymentorders/payments//transactions HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/paymentorders/payments/\", \"transaction\": { \"id\": \"/psp/paymentorders/payments//transactions/\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] } } Property Type Description payment string The relative URI of the payment this transaction belongs to. transaction object The transaction object. └➔ id string The relative URI of the current transaction resource. └➔ created string The ISO-8601 date and time of when the transaction was created. └➔ updated string The ISO-8601 date and time of when the transaction was updated. └➔ type string Indicates the transaction type. └➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. └➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. └➔ description string A 40 character length textual description of the purchase. └➔ payeeReference string A unique reference for the transaction. └➔ failedReason string The human readable explanation of why the payment failed. └➔ isOperational bool true if the transaction is operational; otherwise false. └➔ operations array The array of operations that are possible to perform on the transaction in its current state. Recurring Payments If you want to enable subsequent recurring – server-to-server – payments, you need to create a recurrence token. This token will be utilized after the initial payment order. Recurring payments must be activated on the contract with Swedbank Pay in order to work. Recurrence Token When initiating a Purchase payment order, you need to make sure that the field generateRecurrenceToken is set to true. This recurrence token will stored in the authorization transaction sub-resource on the underlying payment resource. When initiating a Verify payment order, a recurrence token will be generated automatically. This recurrence token is stored in the verification sub-resource on the underlying payment resource. You can view the current payment resource, containg the recurrence token and other payment instrument properties, by expanding the sub-resource currentpayment when doing a GET request on the paymentorders resource. Request 1 2 GET /psp/paymentorders/?$expand=currentpayment HTTP/1.1 Host: Creating Recurring Payments When you have a recurrenceToken token safely tucked away, you can use this token in a subsequent Recur payment order. This will be a server-to-server affair, as we have tied all necessary payment instrument details related to the recurrence token during the initial payment order. Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 POST /psp/paymentorders HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"operation\": \"Recur\", \"recurrenceToken\": \"\", \"currency\": \"SEK\", \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"callbackUrl\": \"https://example.com/callback\" }, \"payeeInfo\": { \"payeeId\": \"\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"Subsite1\" }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/shop/id=123\", \"imageUrl\": \"https://example.com/product1.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 } ], \"metadata\": { \"key1\": \"value1\", \"key2\": 2, \"key3\": 3.1, \"key4\": false } } } Purchase Flow sequenceDiagram participant Payer participant ConsumerSubscription participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) note left of Payer: Checkin activate Payer Payer -&gt;&gt;+ SwedbankPay: Checkin procedure deactivate Payer end rect rgba(55, 91, 134,0.1) activate Payer note left of Payer: Payment Menu Payer -&gt;&gt;+ Merchant: Initiate Purchase deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: POST/psp/paymentorders (generateRecurrenceToken = True) deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel:view-paymentorder deactivate SwedbankPay Merchant --&gt;&gt;- Payer: Display Payment Menu on Merchant Page activate Payer Payer -&gt;&gt; Payer: Initiate Payment Menu Hosted View (open iframe) Payer --&gt;&gt;+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay -&gt;&gt;+ Payer: Do payment logic deactivate SwedbankPay SwedbankPay --&gt;&gt;+ Merchant: POST Payment Callback SwedbankPay --&gt;&gt;- Payer: Payment Status Payer --&gt;&gt;+ Merchant: Redirect to Payment Complete URL Merchant -&gt;&gt;+ SwedbankPay: GET/psp/paymentorders/&lt;paymentOrderId&gt; SwedbankPay --&gt;&gt;+ Merchant: Payment Order Status end rect rgba(63, 204, 164,0.1) note left of Payer: Capture activate Merchant Merchant -&gt;&gt;+ SwedbankPay: POST/psp/paymentorders/&lt;paymentOrderId&gt;/captures deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;PaymentInstruments that support &lt;br&gt;Authorizations. end rect rgba(94, 108, 23,0.1) note left of Payer: Recurring payment activate ConsumerSubscription ConsumerSubscription -&gt;&gt;+ Merchant: Start recurring payment deactivate ConsumerSubscription note left of Merchant: Server-to-Server request at a later date activate Merchant Merchant -&gt;&gt;+ SwedbankPay: POST Card Payments (operation=RECUR) (reccurenceToken included) deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Payment resource opt [Intent=Authorization] Merchant -&gt;&gt;+ SwedbankPay: Create-capture SwedbankPay --&gt;&gt;- Merchant: Transaction resource end activate Merchant Merchant --&gt;&gt;- ConsumerSubscription: display purchase result end Purchase Payments The Purchase operation is used in all common purchase scenarios. Purchase 1 2 3 4 5 { \"paymentorder\": { \"operation\": \"Purchase\" { } Verify Payments The Verify operation lets you post verifications to confirm the validity of credit card information, without reserving or charging any amount. This option is mainly used to initiate a recurring payment scenario where the card will be charged at a later date. The request body is equivalent to a Purchase order with credit card as the selected item. A recurrence token will be generated automatically, rendering the parameter generateRecurrenceToken unnecessary for this operation. Verify 1 2 3 4 5 { \"paymentorder\": { \"operation\": \"Verify\" { } Payments Resource A payment order is able to hold more than one payment object, even though a successful payment order only harbour one successful payment. This is necessary as the consumer might select and initiate a payment option that is not followed through successfully. I.e. if the consumer cancels an invoice payment, a cancel transaction will still be tied to that particular invoice payment resource. This payment resource will continue to exist, even if the consumer successfully should finish the purchase with a credit card payment instead. Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 GET /psp/paymentorders//payments HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": \"/psp/paymentorders/\", \"payments\": { \"id\": \"/psp/paymentorders//payments\", \"paymentList\" : [ { \"id\": \"/psp/creditcard/payments/\", \"instrument\" : \"CreditCard\", \"created\": \"2016-09-14T13:21:29.3182115Z\" }, { \"id\": \"/psp/invoice/payments/\", \"instrument\" : \"Invoice\", \"created\": \"2016-09-14T13:21:29.3182115Z\" } ] } } Field Type Description paymentorder object The payment order object. payments object The payments object. └➔ id string The relative URI and unique identifier of the payments resource this transactions belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. └➔ paymentList array The array of payment objects. └─➔ id string The relative URI and unique identifier of the payment resource this transactions belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. └─➔ instrument string The name of the payment instrument. └─➔ created string The ISO-8601 date and time of when the payment was created. Current Payment Resource The currentpayment resource displays the payment that are active within the payment order container. Request 1 2 3 4 GET /psp/paymentorders//currentpayment HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": \"/psp/paymentorders/\", \"menuElementName\": \"paymentorders\", \"payment\": { \"recurrenceToken\": \"\", \"id\": \"/psp/paymentorders/payments/\", \"number\": 1234567890, \"instrument\": \"CreditCard\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/paymentorders/payments//prices\" }, \"transactions\": { \"id\": \"/psp/paymentorders/payments//transactions\" }, \"authorizations\": { \"id\": \"/psp/paymentorderspayments//authorizations\" }, \"captures\": { \"id\": \"/psp/paymentorders/payments//captures\" }, \"cancellations\": { \"id\": \"/psp/paymentorders/payments//cancellations\" }, \"reversals\": { \"id\": \"/psp/paymentorders/payments//reversals\" }, \"verifications\": { \"id\": \"/psp/paymentorders/payments//verifications\" }, \"urls\" : { \"id\": \"/psp/paymentorderspayments//urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders/payments//payeeInfo\" }, \"metadata\" : { \"id\": \"/psp/paymentorders/payments//metadata\" }, \"settings\": { \"id\": \"/psp/paymentorders/payments//settings\" } }, \"operations\": [] } Field Type Description paymentorder string The relative URI and unique identifier of the paymentorder resource this payment belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. menuElementName string creditcard, invoice, etc. The name of the selected menu element. payment object The payment object. └➔ recurrenceToken string The created recurrenceToken, if operation: Verify or generateRecurrenceToken: true was used. └➔ id string The relative URI and unique identifier of the payment resource this payment belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. └➔ number integer The payment number, useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ instrument string The payment instrument used. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ operation string Purchase, payout, Verify or recur.The type of the initiated payment. └➔ intent string The intent of the payment. └➔ state string Ready, Pending, Failed or Aborted. Indicates the state of the payment. This field is only for status display purposes. └➔ currency string The currency of the payment. └➔ prices object The prices object. └─➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. └─➔ remainingCaptureAmount integer The available amount to capture. └─➔ remainingCancelAmount integer The available amount to cancel. └─➔ remainingReversalAmount integer The available amount to reverse. └➔ description string(40) A 40 character length textual description of the purchase. └➔ payerReference string The reference to the consumer from the merchant system, like mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string sv-SE, nb-NO or ee-EE. Prices Resource Prices The prices resource lists the prices related to a specific payment. Request 1 2 3 4 GET /psp/paymentorders/payments//prices/ HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/paymentorders/payments/\", \"prices\": { \"id\": \"/psp/paymentorders/payments//prices\", \"priceList\": [ { \"type\": \"VISA\", \"amount\": 2350, \"vatAmount\": 0 }, { \"type\": \"MasterCard\", \"amount\": 2350, \"vatAmount\": 0 } ] } } Field Type Description payment string The relative URI and unique identifier of the payment resource this prices belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. prices object The prices resource. └➔ id string The relative URI and unique identifier of the prices resource this prices belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. └➔ priceList array The array of price objects. Note: Even if you specifiy CreditCard in the input message the system will return all your configured card brands instead when you expan the priceList. └─➔ type string The type of the price object. └─➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. └─➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. Prices Object Types Each payment instrument have one or more prices object types. This is most relevant when using card based payments as each type correspond to a card brand or bank respectively. Payer Resource The payer resource contains payer information related to the payment order. The information is retrieved via a consumer profile token (consumerProfileRef), from the Consumers resource during login/checkin. Request 1 2 3 4 GET /psp/paymentorders//payers/ HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": \"/psp/paymentorders/\", \"payer\" : { \"id\": \"/psp/paymentorders//payer\", \"reference\": \"reference to payer\", \"email\": \"email\", \"msisdn\": \"msisdn\", \"shippingAddress\": { \"addressee\": \"firstName + lastName\", \"coAddress\": \"coAddress\", \"streetAddress\": \"streetAddress\", \"zipCode\": \"zipCode\", \"city\": \"city\", \"countryCode\": \"countryCode\" } } } Field Type Description paymentorder string The relative URI and unique identifier of the paymentorder resource this payer belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. payer object The payer object. └➔ id string The relative URI and unique identifier of the payer resource this payer belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. └➔ email string Payer’s registered email address. └➔ msisdn string Payer’s registered mobile phone number. └➔ shippingAddress object The shipping address object related to the payer. └─➔ addresse object The shipping address object related to the payer. └─➔ coAddress string Payer’ s c/o address, if applicable. └─➔ streetAddress string Payer’s street address └─➔ zipCode string Payer’s zip code └─➔ city string Payer’s city of residence └─➔ countryCode string Country Code for country of residence. Checkin Events The Checkin Seamless View can inform about events that occur during Checkin through JavaScript event callbacks which can be implemented in the configuration object passed to the payex.hostedView.consumer(configuration) object. sequenceDiagram participant Consumer participant Merchant participant SwedbankPay as Swedbank Pay Consumer -&gt;&gt; Merchant: visit Merchant -&gt;&gt; Merchant: Prepare, Embed ClientScript Merchant -&gt;&gt; SwedbankPay: payex.hostedView.consumer().open() alt Configuration validation failure SwedbankPay --&gt;&gt; Merchant: onError end alt Identified consumer SwedbankPay-&gt;&gt;Merchant: onConsumerIdentified alt Depending on backend response SwedbankPay-&gt;&gt;Merchant: onShippingDetailsAvailable SwedbankPay-&gt;&gt;Merchant: onBillingDetailsAvailable end end alt Change shipping address Consumer-&gt;&gt;SwedbankPay: Click change shipping adress button SwedbankPay-&gt;&gt;Merchant: OnShippingDetailsAvailable end onConsumerIdentified This event triggers when a consumer has performed Checkin and is identified, if the Payment Menu is not loaded and in the DOM. The onConsumerIdentified event is raised with the following event argument object: onConsumerIdentified event object 1 2 3 4 { \"actionType\": \"OnConsumerIdentified\", \"consumerProfileRef\": \"\" } onShippingDetailsAvailable Triggered when a consumer has been identified or shipping address has been updated. info The Checkin must be completed before any shipping details are finalized, as the Checkin component provides shipping address via the onShippingDetailsAvailable event. onShippingDetailsAvailable event object 1 2 3 4 { \"actionType\": \"OnBillingDetailsAvailable\", \"url\": \"/psp/consumers//shipping-details\" } onBillingDetailsAvailable Triggered when a consumer has been identified onBillingDetailsAvailable event object 1 2 3 4 { \"actionType\": \"OnBillingDetailsAvailable\", \"url\":\"/psp/consumers//billing-details\" } onError Triggered on terminal errors, and when the configuration fails validation. Enable or Disable Payment Menu It is possible to disable the payment menu when only one instrument exist by setting the disablePaymentMenu field to true. The default value is false, exemplified below. Request 1 2 3 4 5 { \"paymentorder\": { \"disablePaymentMenu\": false { } Setting disablePaymentMenu field to true removes all other payment instruments but the one that is available. This feature is only valuable to set to true if you have only one payment instrument available. By setting it to true will remove the frame around the menu and show only the instrument. Request 1 2 3 4 5 { \"paymentorder\": { \"disablePaymentMenu\": true { } Payment Menu Events During operation in the Payment Menu, several events can occur. They are described below. onPaymentMenuInstrumentSelected This event triggers when a user actively changes payment instrument in the Payment Menu. The onPaymentMenuInstrumentSelected event is raised with the following event argument object: onPaymentMenuInstrumentSelected event object 1 2 3 4 { \"name\": \"menu identifier\", \"instrument\": \"creditcard | vipps | swish | invoice\", } Field Type Description name string The name and identifier of specific instrument instances - i.e. if you deploy more than one type of credit card payments, they would be distinguished by name. instrument string Creditcard, vipps, swish, invoice. The instrument selected by the user. onPaymentCreated This event triggers when a user has selected a payment instrument and actively attempts to perform a payment. The onPaymentCreate event is raised with the following event argument object: onPaymentCreated event object 1 2 3 4 { \"id\": \"/psp/paymentorders/payments/\", \"instrument\": \"creditcard | vipps | swish | invoice\", } Field Type Description id string The relative URI and unique identifier of the payment resource this payer belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. instrument string Creditcard, vipps, swish, invoice. The instrument selected when initiating the payment. onPaymentCompleted This event triggers when a payment has completed successfully. The onPaymentCompleted event is raised with the following event argument object: onPaymentCompleted event object 1 2 3 4 { \"id\": \"/psp/paymentorders/payments/\", \"redirectUrl\": \"https://en.wikipedia.org/wiki/Success\" } Field Type Description id string The relative URI and unique identifier of the payment resource this payer belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. redirectUrl string The URI the user will be redirect to after a completed payment. onPaymentCanceled This event triggers when the user cancels the payment. The onPaymentCanceled event is raised with the following event argument object: onPaymentCanceled event object 1 2 3 4 { \"id\": \"/psp/paymentorders/payments/\", \"redirectUrl\": \"https://en.wikipedia.org/wiki/Canceled\" } Field Type Description id string The relative URI and unique identifier of the payment resource this payer belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. redirectUrl string The URI the user will be redirect to after a canceled payment. onPaymentTransactionFailed This event triggers when a payment attempt fails, further attempts can be made for the payment. An error message will appear in the payment UI, and the consumer will be able to try again or choose another payment instrument. The onPaymentTransactionFailed event is raised with the following event argument object: onPaymentTransactionFailed event object 1 2 3 4 { \"id\": \"/psp/paymentorders/payments/\", \"details\": \"[HttpCode ProblemTitle]\" } Field Type Description id string The relative URI and unique identifier of the payment resource this payer belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. details string A human readable and descriptive text of the error. onPaymentFailed This event triggers when a payment has failed, disabling further attempts to perform a payment. The onPaymentFailed event is raised with the following event argument object: onPaymentFailed event object 1 2 3 4 { \"id\": \"/psp/paymentorders/payments/\", \"redirectUrl\": \"https://en.wikipedia.org/wiki/Failed\" } Field Type Description id string The relative URI and unique identifier of the payment resource this payer belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. redirectUrl string The URI the user will be redirect to after a failed payment. onPaymentTermsOfService This event triggers when the user clicks on the “Display terms and conditions” link. The onPaymentTermsOfService event is raised with the following event argument object: onPaymentTermsOfService event object 1 2 3 4 { \"origin\": \"owner | merchant\", \"openUrl\": \"https://example.org/terms.html\" } Field Type Description origin string owner, merchant. The value is always merchant unless Swedbank Pay hosts the view. openUrl string The URI containing Terms of Service and conditions. onError This event triggers during terminal errors or if the configuration fails validation. The onError event will be raised with the following event argument object: onError event object 1 2 3 4 5 { \"origin\": \"consumer | paymentmenu | creditcard | invoice | ...\", \"messageId\": \"&lt;unique message ID&gt;\", \"details\": \"Descriptive text of the error\" } Field Type Description origin string consumer, paymentmenu, creditcard, identifies the system that originated the error. messageId string A unique identifier for the message. details string A human readable and descriptive text of the error. Callback When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform a callback to inform the payee (merchant) about this update. Providing a callbackUrl in POST requests is mandatory. Below we provide three example scenarios of why this is important: If the payer closes the payment window, the merchant will never know what happened to the payment if callbackUrl is not implemented. If the payer stops up in a payment app such as Vipps or Swish, the payer will never come back to the merchant. This means that the merchant won’t know what happened to the payment unless callbackUrl is implemented. If a payer experiences a network error or something else happens that prevents the payer from being redirected from Swedbank Pay back to the merchant website, the callbackUrl is what ensures that you receive the information about what happened with the payment. When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform an asynchronous server-to-server callback to inform the payee (merchant) about this update. Swedbank Pay will make an HTTP POST to the callbackUrl that was specified when the payee (merchant) created the payment. When the callbackUrl receives such a callback, an HTTP GET request must be made on the payment or on the transaction. The retrieved payment or transaction resource will give you the necessary information about the recent change/update. The callback will be retried if it fails. Below are the retry timings, in seconds from the initial transaction time: 30 seconds 60 seconds 360 seconds 432 seconds 864 seconds 1265 seconds The callback is sent from the following IP address: 82.115.146.1 A callback should return a 200 OK response. Payment Order Callback 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/\", \"instrument\": \"paymentorders\" }, \"payment\": { \"id\": \"/psp/paymentorders/payments/\", \"number\": 222222222 }, \"transaction\": { \"id\": \"/psp/paymentorders/payments//&lt;transaction type&gt;/\", \"number\": 333333333 } } Parameter Description &lt;transaction type&gt; authorizations, captures, cancellations, reversals The sequence diagram below shows the HTTP POST you will receive from Swedbank Pay, and the two GET requests that you make to get the updated status. sequenceDiagram Participant Merchant Participant SwedbankPay as Swedbank Pay activate SwedbankPay SwedbankPay-&gt;&gt;+Merchant: POST &lt;callbackUrl&gt; deactivate SwedbankPay note left of Merchant: Callback by Swedbank Pay Merchant--&gt;&gt;+SwedbankPay: HTTP response Merchant-&gt;&gt;+SwedbankPay: GET paymentorders payment deactivate Merchant note left of Merchant: First API request SwedbankPay--&gt;&gt;+Merchant: payment resource deactivate SwedbankPay Payment Order Callback 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"orderReference\": \"OR-123456\", \"paymentOrder\":{ \"id\": \"/psp/paymentorders/\", \"instrument\": \"&lt;payment instrument&gt;\" }, \"payment\":{ \"id\": \"/psp/&lt;payment instrument&gt;/payments/\", \"number\": 222222222 }, \"transaction\":{ \"id\": \"/psp/&lt;payment instrument&gt;/payments//&lt;transaction type&gt;/\", \"number\": 333333333 } } Parameter Description orderReference The orderReference sent in on create paymentOrder Payment Instrument CreditCard, Invoice, Swish, Vipps, DirectDebit, MobilePay Transaction Type Authorization, Capture, Cancellation, Reversal The sequence diagram below shows the HTTP POST you will receive from Swedbank Pay, and the two GET requests that you make to get the updated status. sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay activate Merchant activate SwedbankPay SwedbankPay-&gt;Merchant: POST &lt;callbackUrl&gt; note left of Merchant: Callback by Swedbank Pay Merchant--&gt;SwedbankPay: HTTP response deactivate SwedbankPay deactivate Merchant activate Merchant Merchant-&gt;SwedbankPay: GET &lt;payment instrument&gt; payment activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;Merchant: payment resource deactivate SwedbankPay deactivate Merchant Problems When performing operations against the API, it will respond with a problem message that contain details of the error type if the request could not be successfully performed. Regardless of why the error occurred, the problem message will follow the same structure as specified in the Problem Details for HTTP APIs] specification. The structure of a problem message will look like this: 1 2 3 4 5 6 7 8 9 10 11 12 { \"type\": \"https://api.payex.com/psp/errordetail/paymentorders/inputerror\", \"title\": \"There was an input error\", \"detail\": \"Please correct the errors and retry the request\", \"instance\": \"\", \"status\": 400, \"action\": \"RetryNewData\", \"problems\": [{ \"name\": \"CreditCardParameters.Issuer\", \"description\": \"minimum one issuer must be enabled \" }] } Field Type Description type string The URI that identifies the error type. This is the only field usable for programmatic identification of the type of error! When dereferenced, it might lead you to a human readable description of the error and how it can be recovered from. title string The title contains a human readable description of the error. detail string A detailed, human readable description of the error. instance string The identifier of the error instance. This might be of use to Swedbank Pay support personnel in order to find the exact error and the context it occurred in. status integer The HTTP status code that the problem was served with. action string The action indicates how the error can be recovered from. problems array The array of problem detail objects. └➔ [].name string The name of the field, header, object, entity or likewise that was erroneous. └➔ [].description string The description of what was wrong with the field, header, object, entity or likewise identified by name. Common Problem Types All common types will have the following URI in front of type: https://api.payex.com/psp/errordetail/&lt;error-type&gt; Type Status Description inputerror 400 The server cannot or will not process the request due to an apparent client error (e.g. malformed request syntax, size to large, invalid request). forbidden 403 The request was valid, but the server is refusing the action. The necessary permissions to access the resource might be lacking. notfound 404 The requested resource could not be found, but may be available in the future. Subsequent requests are permissible. systemerror 500 A generic error message. configurationerror 500 A error relating to configuration issues. Expansion The payment resource contain the ID of related sub-resources in its response properties. These sub-resources can be expanded inline by using the request parameter expand. This is an effective way to limit the number of necessary calls to the API, as you return several properties related to a Payment resource in a single request. info Note that the expand parameter is available to all API requests but only applies to the request response. This means that you can use the expand parameter on a POST or PATCHrequest to get a response containing the target resource including expanded properties. This example below add the urls and authorizations field inlines to the response, enabling you to access information from these sub-resources. Expansion 1 2 GET /psp/paymentorders/payments/?$expand=urls,authorizations HTTP/1.1 Host: To avoid unnecessary overhead, you should only expand the nodes you need info about. PayeeInfo The payeeinfo resource contains information about the payee (i.e. a merchant, a corporation etc) related to a specific payment. Request 1 2 3 4 GET /psp/paymentorders/payments//payeeInfo HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/paymentorders/payments/\", \"payeeInfo\": { \"id\": \"/psp/paymentorders/payments//payeeInfo\", \"payeeId\": \"\" \"payeeReference\": \"EN1234\", \"payeeName\": \"TestMerchant1\", \"productCategory\": \"EF1234\", \"orderReference\": \"or-123456\" } } Field Type Description payment string The relative URI and unique identifier of the payment resource this payeeInfo belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. └➔ id string The relative URI and unique identifier of the payeeInfo resource this payeeInfo belongs to.. Please read about URI Usage to understand how this and other URIs should be used in your solution. └➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay └➔ payeeReference string(30) A unique reference set by the merchant system. See below for details └➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay. └➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. You therefore need to ensure that the value given here is valid in the settlement. └➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. Payee Reference The payeeReference given when creating transactions and payments has some specific processing rules depending on specifications in the contract. It must be unique for every operation, used to ensure exactly-once delivery of a transactional operation from the merchant system. Its length and content validation is dependent on whether the transaction.number or the payeeReference is sent to the acquirer. If you select Option A in the settlement process (Swedbank Pay will handle the settlement), Swedbank Pay will send the transaction.number to the acquirer and the payeeReference must be in the format of characters A-Za-z0-9 (including -) and string(30). If you select Option B in the settlement process (you will handle the settlement yourself), Swedbank Pay will send the payeeReference to the acquirer and it will be limited to the format of string(12) and all characters must be digits. Merchant Authenticated Consumer When the consumer is identified and authenticated by the merchant, the consumer’s identity can be included in the Payment Order request. Merchant Authenticated Consumer is performed as an alternative to Checkin when creating the Payment Order upon the initializaiont of the Payment Menu. You can use Merchant Authenticated Consumer only if you have an agreement with Swedbank Pay. The additional nationalIdentifier field described below should be added to the paymentorder.payer object already in the Payment Order creation request, as an alternative to consumerProfileRef. warning Bank ID authentication required In order to use the Merchant Authenticated Consumer feature, you need a legal agreement with Swedbank Pay which mandates that the consumer identified by the nationalIdentifier is authenticated with Bank ID prior to the request. An example of how a Merchant Authenticated Consumer request looks like is provided below (abbreviated for brevity): Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 POST /psp/paymentorders HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"payer\": { \"nationalIdentifier\": { \"socialSecurityNumber\": \"\", \"countryCode\": \"SE\" } } } } Required Field Type Description check paymentorder object The payment order object.   └➔ payer object The payer object containing information about the payer relevant for the payment order.   └─➔ nationalIdentifier string The national identifier object.   └──➔ socialSecurityNumber string The consumers social security number. Must be part of what you get from your authentication process.   └──➔ countryCode string The countrycode of the consumer. When the consumer is authenticated by the Merchant, some payment instruments will allow a more frictionless payment process. Invoice One-Click payments does not require the last 4/5 digits in the payer’s social security number (SSN), for instance. Below you can see an example of how the payment window looks like with and without Merchant Authenticated Consumer. To the left, the SSN is removed altogether because the payer is authenticated by the Merchant, and to the right the last 4/5 digits of the SSN required as usual. Settlement and Reconciliation Reconciliation is an important step in an economic transaction. When a payment is reconciled, captured amounts for the payment are matched against the corresponding settlement. The information needed to reconcile captured funds - the balance report and transactions list - are available for all merchants using Swedbank Pay. By default, the settlement files will be sent to you by via e-mail. We also have the option to send it via SFTP as well, if this is something you would like then you need to state this to your sales representative, so they can inform the setup team when the time is ready. The settlement frequency is defined in the agreement and you will receive it (per default) once a month, or once a week. You do not need to subscribe, the files will be delivered by default. Contact omni.client@swedbankpay.se for further inquiries regarding this. Settlement There are two main alternatives for settlement - either we handle the settlement process for you, or you handle the process yourself : Swedbank Pay handles the settlement process Swedbank Pay handles the settlement process on your behalf, (called “Redovisningsservice”). Swedbank Pay transfers the net amount to you directly. Swedbank Pay Checkout When choosing Swedbank Pay Checkout we always handle the settlement process for you, gathering all your eCommerce payments in one place. Straighforward and time efficient. You handle the settlement process yourself If you will handle the settlement yourself, then Swedbank Pay will send you an invoice with the relevant fees, in addition to the report and transactions lists. Your acquirer will transfer settled funds to you. Balance Report The Balance Report (a .pdf file) specifies the total sales for a specific period, including fees and VAT. The report contains three parts: a payment summary and specifications for sales and for fees. Payment Summary Provides a summary of the Amount sold, Fees and VAT. If Swedbank Pay handles the settlement process, the Transferedamount - shown in the balance report summary is equivalent to the disbursement on the bank statement (the remaining total amount after fees). Sales specification Provides a specification over sales for the given period. The sales total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each sales row specify Quantity, Sum sales and Amount to pay out, the last one is only eligble if Swedbank Pay handles the Settlement process. Fees specification Provides a specification over fees for the given period. The fees total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each fees row specify Quantity (sales), Amount (sales), Unit price, Provision and fee Amount. If you handle the settlement process yourselves you will receive a separat invoice for fees. Transactions List The Transaction List (provided in .xlsx and .xml formats) specifies all transactions for a specific period, including a summary of transactions grouped by payment instrument. Both formats contain the same information, but the xml file is meant for computer processing while the excel workbook is meant for human interaction. The first row contains the name of the Swedbank Pay company (e.g. Swedbank Pay Solutions AB) that the merchant has the contract with, and the balance report number. The header fields contain a summary of the transactions displayed in the body. Header fields Field Type Description Prefix String The Prefix used for transactions, only eligible if merchant uses prefix. Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). ServiceType String The service type of the service used (e.g. Creditcard). Service String The service used (e.g. Creditcard). NoOfDebet Decimal Total number of debit transactions for the given service. NoOfCredit Decimal Total number of credit transactions for the given service. Amount Decimal Total amount for the given service (e.g 100.00). FromDate ISO 8601 The earlistest transaction date, YYYY-MM-DD. ToDate ISO 8601 The latest transaction date, YYYY-MM-DD. Body fields Field Type Description Swedbank Pay Batch Number Decimal A batch number common to all types of transactions processed by Swedbank Pay. Transaction Number Decimal A unique identifier of the transaction, can be traced in Swedbank Pay Admin user interface. Order id String A unique identifier of the order, as sent from the merchant to Swedbank Pay. Transactions that are related to the same order are associated with this ID. Date Created ISO 8601 Transaction capture date/time. YYYY-MM-DD hh:mm:ss. Date Modified ISO 8601 Transaction settle date/time. YYYY-MM-DD hh:mm:ss. Provider String The service provider (e.g. Babs, Swedbank). Type String The service type of the related transaction (e.g. Creditcard). Amount Decimal Total amount of the related transaction (e.g 100.00). Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). Product Number String A product number, as sent by merchant to Swedbank Pay. Description String A textual description of the transaction, as sent by merchant to Swedbank Pay. VAT Amount Decimal VAT Amount for the given transaction (e.g 100.00). VAT Percentage Decimal VAT Percentage for the given transaction. Credit Card Batch Number Decimal The reference number from the credit card processor. Reference Decimal The transaction reference from processor. Swedbank Pay Account Number Decimal The Account number given, shown in Swedbank Pay admin. Referenced Transaction Number Decimal Transaction number for the Authoriation transaction for a two-stage transaction or the number of the debit transaction if it is a credit transaction. Sales Channel String The channel through which the transaction was sent to Swedbank Pay (e.g Transaction via eCommerce APIs). Brand String If eligible, Branding information as sent by merchant to Swedbank Pay. Point Of Sale String If eligible, POS information as sent by merchant to Swedbank Pay. Reconciliation To do the reconciliation, you need to match the information in your system against the information provided by Swedbank Pay in the balance report and transaction list. Below is a sequence diagram detailing the interaction. sequenceDiagram participant SwedbankPay as Swedbank Pay activate Merchant activate SwedbankPay Merchant--&gt;&gt;SwedbankPay: Online payment transactions deactivate Merchant deactivate SwedbankPay activate Merchant SwedbankPay-&gt;&gt;Merchant: Balance Report (PDF-file) note left of Merchant: files are sent by e-mail or file transfer SwedbankPay-&gt;&gt;Merchant: Transaction list (XLSX-file) SwedbankPay-&gt;&gt;Merchant: Transaction list (XML-file) deactivate Merchant There are two ways for you to match the information from your system with the information given in the reconciliation files from Swedbank Pay: You can use information generated by your system (you will have to set a unique payeeReference when you make the transaction), or You can use the transaction number generated by Swedbank Pay (this is called transaction number and is returned from Swedbank Pay after you have created the transaction). A credit card transaction is made when you either make a capture or a reversal. In the input data for making a capture, you will set the payeeReference. The unique value of this field is the same as the field called OrderID in the reconciliation file. 1 2 3 4 5 6 7 8 { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Reversal\", \"payeeReference\": \"ABC123\" } } When you receive the response from Swedbank Pay, the response will include transaction.number. This is the same as the field called TransactionNo in the reconciliation file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"payment\": \"/psp/paymentorders/payments/\", \"capture\": { \"id\": \"/psp/paymentorders/payments//captures/\", \"transaction\": { \"id\": \"/psp/paymentorders/payments//transactions/\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"Test Capture\", \"payeeReference\": \"ABC123\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } payeeReference sent to Swedbank Pay is equal to OrderId in the reconciliation file. capture.transaction.number returned from Swedbank Pay is equal to TransactionNo in reconciliation file. Samples The content of the files depends on the type of agreement you have made with Swedbank Pay. For some payment instruments, only option A is available, while for other payment instruments, only option B is available. The sample files can be downloaded below. Option A: Swedbank Pay handles the settlement process PDF Balance Report for Swedbank Pay Checkout PDF Balance Report XLSX Transaction List XML Transaction List Option B: You will handle the settlement process yourself PDF Balance Report XLSX Transaction List XML Transaction List Split Settlement The prefix split is the easy way of doing settlements for companies with multiple sub merchants. With only a few easy steps, you can make the settlement process more efficient with regards to invoicing, payouts and setup for both your sub merchants and yourself. In short, it is a settlement feature where a company with a website or an app can attach specific prefix numbers to sub merchants selling their goods or services through the company. The prefix number is used to match the transactions and the merchant, so the settlement is automatically split between the sub merchants. If you run a site selling tickets to concerts, theatres, sporting events etc., each venue gets its own prefix number. If you run a funeral home, the sub merchants can be everything from flower delivery to charities. What we need from you as a company Send us a KYC form for each sub merchant you want to include. We will also do a KYC check on your sub merchants, providing extra security for you. Give every sub merchant who sells goods/services at your website or in your app a unique prefix number. This needs to be included in the KYC form you send to us. We recommend using the same customer number they have in your system. Attach the prefix number to all the goods/services the sub merchant sells through your website or app, so the goods/services can be matched to the correct merchant in our back office system. A partner agreement is needed for the automatic deduction of revenue cuts and fees. How it works We set up the sub merchant prefix in our systems. The prefix number is added in the subsite field in the API call when you create the payment for the goods or service. The customer selects payment instrument and completes the payment. The payment goes into the client funds account. Swedbank Pay matches the transaction and the merchant using the prefix number. The settlement is split and connected to the correct merchant. Revenue cuts for the super merchant and fees from Swedbank Pay are deducted automatically. Payout to the sub merchant is done. The upsides Since the sub merchants are connected to Swedbank Pay through the super merchant instead of having separate setups, this means that you: Only need one agreement for credit card, Vipps, Swish, MobilePay, invoice and payment gateway. Only need one acquiring agreement. Only need one Vipps/Swish certificate. Can add more payment instruments easily, as it only has to be done once. Can set up new sub merchants quickly, as the only thing needed is a KYC form and a prefix number. This shortens the setup time for both you and us to a matter of hours. The automatic settlement split and deduction of fees and revenue cuts minimizes the work for your accounting department, as you do not have to invoice your sub merchants. The prefix split is available with all the payment instruments we offer on our eCom platform. Good to know With regards to admin functions, we offer a full integration towards our admin system. This way, you do not have to log in to Swedbank Pay Admin to perform these operations. Captures and cancels Captures and cancels are done by the super merchant the same way as any other normal flow. Reversals In cases where you need to do reversals, this will be performed by the super merchant. The reversal amount will be charged from the sub merchants prefix. If the sub merchants balance is 0 (zero), the super merchant will be invoiced. The super merchant will in turn have to invoice this amount to the sub merchant. Updating Payment Menu When the contents of the shopping cart changes or anything else that affects the amount occurs, the paymentorder must be updated and the Payment Menu must be refreshed. info Features that are not described in the previous sections must not be used, although they are available in the API. Flags that can be turned to true must be kept false as described in this standard setup documentation. info Your integration must be resilient to change. Properties, operations, headers, etc., that aren’t understood in any response must be ignored. Don’t expect a specific order of elements. When in doubt, please follow the robustness principle. Back: After Payment",
    "tags": "",
    "url": "/checkout/other-features.html"
  },{
    "title": "Gift Cards – Other Features",
    "text": "Purchase Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 POST /api/payments/payment-account/{paymentAccountId}/payment/purchase HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"additionalData\": \"string\", \"amount\": 10000, \"currency\": \"NOK\", \"description\": \"string\", \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"paymentOrderRef\": \"UUID\", \"paymentTransactionRef\": \"UUID\", \"products\": [ { \"amount\": 1337, \"description\": \"1x banana\", \"productId\": \"001\", \"quantity\": 13.37, \"unitOfMeasure\": \"L\", \"vatAmount\": 337, \"vatRate\": 25 } ], \"repeat\": true, \"stan\": 123456 } Required Field Type Description check accountIdentifier Object     accountId string Swedbank Pay internal id for card/account. check accountKey string Primary Account Number (PAN) for card/account. This is mandatory if ‘track2’ is not present.   cvc string Card Verification Code.   encryptedPin string If ‘000’ is set on authorization request, encrypted PIN block will be returned here.   expiryDate string Expiry date on card (only applicable for PaymentInstrumentType ‘creditcard’) where expiry date is printed on card. Format MM/YY   securityCode string Card Security Code.   track2 string Track 2 excluding start and end sentinel.   additionalData string Optional additional data stored on transaction. check amount integer Total amount of Payment (in cents), ie. 100Kr -&gt; 10000. check currency string Currency for Payment.   description string Payment description. check merchant object   check merchantName string Name of merchant where payment was performed   terminalId string Used to identify terminal. check paymentOrderRef string Unique ID to bind 2-phase transactions. check paymentTransactionRef string Unique ID for each payment.   products list   check amount integer Monetary value of purchased product (in cents).   description string Optional product description. check productId string Used to identify a product. check quantity number Number of product units sold (both integer and decimal numbers supported). check unitOfMeasure string Type of measurement, L=Litre, U=Unit, G=Grams This may refer to the number of packs, number of bottles etc., O=present, this denotes that there is no measurement. Enum:[ L, U, G, O ].   vatAmount integer Monetary value of vat-amount for purchased product (in cents).   vatRate number Vat-rate for purchased product (both integer and decimal numbers supported).   repeat boolean Notifies this is a repeat message.   stan string Systems trace audit number. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"allowedProductIds\": [ \"string\" ], \"amount\": 0, \"created\": \"2020-05-11T08:20:13.829Z\", \"currency\": \"string\", \"description\": \"string\", \"issuer\": { \"acquirerId\": \"string\", \"acquirerName\": \"string\", \"issuerId\": \"string\", \"issuerName\": \"string\", \"settlementProvided\": true }, \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"operation\": \"string\", \"paymentId\": \"string\", \"paymentOrderRef\": \"string\", \"paymentTransactionRef\": \"string\", \"remainingCancelAmount\": 0, \"remainingCaptureAmount\": 0, \"remainingReversalAmount\": 0, \"state\": \"OK\", \"transmissionTime\": \"2020-05-11T08:20:13.829Z\", \"updated\": \"2020-05-11T08:20:13.829Z\" } Field Type Description state enum OK, FAILED, REVERSED or DUPLICATE. The state of the transaction. Deposit Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 POST /api/payments/payment-account/{paymentAccountId}/payment/deposit HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"additionalData\": \"string\", \"amount\": 10000, \"currency\": \"NOK\", \"description\": \"string\", \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"paymentOrderRef\": \"UUID\", \"paymentTransactionRef\": \"UUID\", \"repeat\": true, \"stan\": 123456 } Required Field Type Description check accountIdentifier Object     accountId string Swedbank Pay internal id for card/account. check accountKey string Primary Account Number (PAN) for card/account. This is mandatory if ‘track2’ is not present.   cvc string Card Verification Code.   encryptedPin string If ‘000’ is set on authorization request, encrypted PIN block will be returned here.   expiryDate string Expiry date on card (only applicable for PaymentInstrumentType ‘creditcard’) where expiry date is printed on card. Format MM/YY   securityCode string Card Security Code.   track2 string Track 2 excluding start and end sentinel.   additionalData string Optional additional data stored on transaction. check amount integer Total amount of Payment (in cents), ie. 100Kr -&gt; 10000. check currency string Currency for Payment.   description string Payment description. check merchant object   check merchantName string Name of merchant where payment was performed   terminalId string Used to identify terminal. check paymentOrderRef string Unique ID to bind 2-phase transactions. check paymentTransactionRef string Unique ID for each payment.   repeat boolean Notifies this is a repeat message.   stan string Systems trace audit number. Response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"allowedProductIds\": [ \"string\" ], \"amount\": 0, \"created\": \"2020-05-11T09:58:33.431Z\", \"currency\": \"string\", \"description\": \"string\", \"issuer\": { \"acquirerId\": \"string\", \"acquirerName\": \"string\", \"issuerId\": \"string\", \"issuerName\": \"string\", \"settlementProvided\": true }, \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"operation\": \"string\", \"paymentId\": \"string\", \"paymentOrderRef\": \"string\", \"paymentTransactionRef\": \"string\", \"remainingCancelAmount\": 0, \"remainingCaptureAmount\": 0, \"remainingReversalAmount\": 0, \"state\": \"OK\", \"transmissionTime\": \"2020-05-11T09:58:33.431Z\", \"updated\": \"2020-05-11T09:58:33.431Z\" } Field Type Description state enum OK, FAILED, REVERSED or DUPLICATE. The state of the transaction. Balance Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 POST /api/payments/payment-account/balance HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" } } Required Field Type Description check accountIdentifier Object     accountId string Swedbank Pay internal id for card/account. check accountKey string Primary Account Number (PAN) for card/account. This is mandatory if ‘track2’ is not present.   cvc string Card Verification Code.   encryptedPin string If ‘000’ is set on authorization request, encrypted PIN block will be returned here.   expiryDate string Expiry date on card (only applicable for PaymentInstrumentType ‘creditcard’) where expiry date is printed on card. Format MM/YY   securityCode string Card Security Code.   track2 string Track 2 excluding start and end sentinel. Response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"paymentAccount\": { \"accountSummary\": { \"accountId\": 123456789, \"balance\": 10000, \"currency\": \"NOK\", \"expiryDate\": \"2020-01-15\", \"paymentInstrumentType\": \"giftcard\" }, \"issuerSummary\": { \"acquirerId\": \"string\", \"acquirerName\": \"string\", \"issuerId\": \"string\", \"issuerName\": \"string\", \"settlementProvided\": true } } } Authentication Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 POST /api/payments/payment-account/{paymentAccountId}/payment/authorize HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"additionalData\": \"string\", \"amount\": 10000, \"currency\": \"NOK\", \"description\": \"string\", \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"paymentOrderRef\": \"UUID\", \"paymentTransactionRef\": \"UUID\", \"repeat\": true, \"stan\": 123456 } Required Field Type Description check accountIdentifier Object     accountId string Swedbank Pay internal id for card/account. check accountKey string Primary Account Number (PAN) for card/account. This is mandatory if ‘track2’ is not present.   cvc string Card Verification Code.   encryptedPin string If ‘000’ is set on authorization request, encrypted PIN block will be returned here.   expiryDate string Expiry date on card (only applicable for PaymentInstrumentType ‘creditcard’) where expiry date is printed on card. Format MM/YY   securityCode string Card Security Code.   track2 string Track 2 excluding start and end sentinel.   additionalData string Optional additional data stored on transaction. check amount integer Total amount of Payment (in cents), ie. 100Kr -&gt; 10000. check currency string Currency for Payment.   description string Payment description. check merchant object   check merchantName string Name of merchant where payment was performed   terminalId string Used to identify terminal. check paymentOrderRef string Unique ID to bind 2-phase transactions. check paymentTransactionRef string Unique ID for each payment.   repeat boolean Notifies this is a repeat message.   stan string Systems trace audit number. Response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"allowedProductIds\": [ \"string\" ], \"amount\": 0, \"created\": \"2020-05-12T07:02:36.719Z\", \"currency\": \"string\", \"description\": \"string\", \"issuer\": { \"acquirerId\": \"string\", \"acquirerName\": \"string\", \"issuerId\": \"string\", \"issuerName\": \"string\", \"settlementProvided\": true }, \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"operation\": \"string\", \"paymentId\": \"string\", \"paymentOrderRef\": \"string\", \"paymentTransactionRef\": \"string\", \"remainingCancelAmount\": 0, \"remainingCaptureAmount\": 0, \"remainingReversalAmount\": 0, \"state\": \"OK\", \"transmissionTime\": \"2020-05-12T07:02:36.719Z\", \"updated\": \"2020-05-12T07:02:36.719Z\" } Field Type Description state enum OK, FAILED, REVERSED or DUPLICATE. The state of the transaction.",
    "tags": "",
    "url": "/gift-cards/other-features.html"
  },{
    "title": "Page 1",
    "text": "Welcome to the Swedbank Pay {developer portal} Our developer portal gives you the full tool box for integrating our payment instruments and getting started with easy, flexible and safe payments on your e-commerce website. Start your integration shopping_cart Checkout With our Checkout you get the pre-built all-in-one payment solution, complete with a checkin interface and payment menu. arrow_forward credit_card Payments Payments gives you a one-by-one integration with more customization for each payment method to build your own payment menu. arrow_forward card_giftcard Gift Cards Our Gift Cards API allows your customers to pay with prepaid gift cards issued by Swedbank Pay in your Checkout. arrow_forward Trusted by image/svg+xml Try our Demoshop. Unsure about how it all works? See how our checkout and payment methods are used in practice! Go to the demoshop arrow_forward Looking for SDKs? Android SDK Learn more about how to integrate our Android SDK arrow_forward Swift SDK Learn more about how to integrate our Swift SDK arrow_forward .NET SDK Learn more about how to integrate our .NET SDK arrow_forward PHP SDK Learn more about how to integrate our PHP SDK arrow_forward Or perhaps modules? Episerver See how you can integrate the Episerver module arrow_forward Magento 2 See how you can integrate the Magento 2 module arrow_forward WooCommerce See how you can integrate the WooCommerce module arrow_forward What's new in the documentation 28 May 2020 Version 1.11.0 Added a new Trustly Payments section. Added information about Storing URIs in the Technical Information section. 23 May 2020 Version 1.10.1 Updated Swish Redirect requests. Added orderReference information in Payment Order Callback in Checkout Other features. 10 May 2020 Version 1.10.0 Added a new Gift Cards section with descriptions of our Gift Cards API. Added a new section Co-badge Card Choice for Dankort in Card Payments. 02 May 2020 Version 1.9.2 Corrected table in payments page 01 May 2020 Version 1.9.1 Corrected sequence diagrams in Swish Payments and Vipps Payments. The description field is now more thoroughly described for all requests it’s present in. The language field is now better described for all requests it’s present in. All broken links should now be unbroken. See full release notes Extra resources account_circle OS development guidelines This is how we create an inclusive environment arrow_forward content_paste Test data Get the required data for testing in our interfaces arrow_forward menu_book Terminology Get a better understanding of the terms we use arrow_forward See all resources (7) Data protection, public migration key etc arrow_forward Can't find what you are looking for? We are always trying to make the developer portal as good as it can be please don’t hesitate to contact us. Contact us here",
    "tags": "",
    "url": "/page1.html"
  },{
    "title": "Page 2",
    "text": "",
    "tags": "",
    "url": "/page2.html"
  },{
    "title": "Test Client",
    "text": "Prerequisites Java 11 VueJS Maven Postgres Project setup 1 2 3 4 5 6 7 8 vas-payment-api-client ├─┬ backend → backend module with Spring Boot code │ ├── src │ └── pom.xml ├─┬ frontend → frontend module with Vue.js code │ ├── src │ └── pom.xml └── pom.xml → Maven parent pom managing both modules First App run informative PostgreSQL The application expects a PostgreSQL server to be running on localhost with a username test and password test to exist. The username and password for PostgreSQL can automatically be configured if PostgreSQL server is started in Docker with environment variables POSTGRES_USER=test and POSTGRES_PASSWORD=test are set (See docker-compose.yml). Clone the Payment Client repository from Github. Inside the root directory, do a: 1 mvn clean install Run the Spring Boot App: 1 mvn --projects backend spring-boot:run Now go to http://localhost:8080/ and have a look at your new client. Testing application Add a new Merchant with the details provided by Swedbank Pay. Click on Gift Cards and add a new Gift card. Build docker image 1 mvn --projects backend clean compile jib:dockerBuild Deploy to local docker 1 docker-compose up -d",
    "tags": "",
    "url": "/gift-cards/payment-client.html"
  },{
    "title": "Swedbank Pay Checkout – Payment Menu",
    "text": "Payment Menu begins where Checkin left off, letting the payer complete their purchase. Step 3: Create Payment Order Once consumer has been identified, the next step is to initiate the payment using consumerProfileRef retrieved in the previous step. We start by performing a POST request towards the paymentorder resource with the payer information (such as consumerProfileRef) we obtained in the checkin process described above. Remember to read up on our URL resource. info To minimize the risk for a challenge request (Strong Customer Authentication – “SCA”) on card payments, it’s recommended that you add as much data as possible to the riskIndicator object in the request below. Payment Url For our Seamless Views, the field called paymentUrl will be used when the consumer is redirected out of the Seamless View (the iframe). The consumer is redirected out of frame when selecting the payment instrument Vipps or in the 3-D Secure verification for Credit Card Payments. The URL should represent the page of where the Payment Order Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the Seamless View was added to in order to initiate the payment process. info Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment Order as the one that initiated the payment process originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. Request Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 POST /psp/paymentorders HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"generateRecurrenceToken\": false, \"restrictedToInstruments\": [\"CreditCard\", \"Invoice\"], \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditoons.pdf\" }, \"payeeInfo\": { \"payeeId\": \"\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\" }, \"payer\": { \"consumerProfileRef\": \"\", \"email\": \"olivia.nyhuus@payex.com\", \"msisdn\": \"+4798765432\", \"workPhoneNumber\" : \"+4787654321\", \"homePhoneNumber\" : \"+4776543210\" }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"I1\", \"name\": \"InvoiceFee\", \"type\": \"PAYMENT_FEE\", \"class\": \"Fees\", \"description\": \"Fee for paying with Invoice\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 1900, \"vatPercent\": 0, \"amount\": 1900, \"vatAmount\": 0, \"restrictedToInstruments\": [ \"Invoice-PayExFinancingSe\", \"Invoice-CampaignInvoiceSe\" ] } ], \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Required Field Type Description check paymentorder object The payment order object. check └➔ operation string The operation that the payment order is supposed to perform. check └➔ currency string The currency of the payment. check └➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. check └➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. check └➔ description string The description of the payment order. check └➔ userAgent string The user agent of the payer. check └➔ language string The language of the payer. check └➔ generateRecurrenceToken bool Determines if a recurrence token should be generated. A recurrence token is primarily used to enable future recurring payments - with the same token - through server-to-server calls. Default value is false.   └➔ restrictedToInstruments array CreditCard, Invoice, Vipps, Swish and/or CreditAccount. Invoice supports the subtypes PayExFinancingNo, PayExFinancingSe and PayMonthlyInvoiceSe, separated by a dash, e.g.; Invoice-PayExFinancingNo. Limits the options available to the consumer in the payment menu. Default value is all supported payment instruments. Usage of this field requires an agreement with Swedbank Pay. check └➔ urls object The urls object, containing the URLs relevant for the payment order. check └─➔ hostUrls array The array of URIs valid for embedding of Swedbank Pay Hosted Views. check └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled, either by the payer or by the merchant trough an abort request of the payment or paymentorder.   └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the payment. check └─➔ callbackUrl string The URI to the API endpoint receiving POST requests on transaction activity related to the payment order. check └─➔ termsOfServiceUrl string The URI to the terms of service document the payer must accept in order to complete the payment. Note that this field is not required unless generateReferenceToken or generateRecurrenceToken is also submitted in the request. This is the Merchants, not the Swedbank Pay Terms of Service. HTTPS is a requirement. check └➔ payeeInfo string The payeeInfo object, containing information about the payee. check └─➔ payeeId string The ID of the payee, usually the merchant ID. check └─➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The name of the payee, usually the name of the merchant.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ subsite String(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used.   └➔ payer object The payer object containing information about the payer relevant for the payment order. ︎︎︎ └─➔ consumerProfileRef string The consumer profile reference as obtained through initiating a consumer session.   └─➔ email string The e-mail address of the payer. Will be used to prefill the Checkin as well as on the payer’s profile, if not already set.   └─➔ msisdn string The mobile phone number of the Payer. Will be prefilled on Checkin page and used on the payer’s profile, if not already set. The mobile number must have a country code prefix and be 8 to 15 digits in length.   └─➔ workPhoneNumber string The work phone number of the payer. Optional (increased chance for frictionless flow if set)   └─➔ homePhoneNumber string The home phone number of the payer. Optional (increased chance for frictionless flow if set) check └➔ orderItems array The array of items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things. orderItems is required in all requests. In capture requests it should only contain the items to be captured from the order. check └─➔ reference string A reference that identifies the order item. check └─➔ name string The name of the order item. check └─➔ type string PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE DISCOUNT, VALUE_CODE or OTHER. The type of the order item. PAYMENT_FEE is the amount you are charged with when you are paying with invoice. The amount can be defined in the amount field below. check └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w]* (a-zA-Z0-9_). Swedbank Pay may use this field for statistics.   └─➔ itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ └─➔ imageUrl string The URL to an image of the order item.   └─➔ description string A 40 character length textual description of the purchase.   └─➔ discountDescription string The human readable description of the possible discount. check └─➔ quantity integer The 4 decimal precision quantity of order items being purchased. check └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is a free-text field and is used for your own book keeping. check └─➔ unitPrice integer The price per unit of order item, including VAT.   └─➔ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check └─➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. check └─➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged.   └➔ riskIndicator array This optional object consist of information that helps verifying the payer. Providing these fields decreases the likelyhood of having to promt for 3-D Secure authenticaiton of the payer when they are authenticating the purchacse.   └─➔ deliveryEmailAdress string For electronic delivery, the email address to which the merchandise was delivered. Providing this field when appropriate decreases the likelyhood of a 3-D Secure authentication for the payer.   └─➔ deliveryTimeFrameIndicator string Indicates the merchandise delivery timeframe. 01 (Electronic Delivery) 02 (Same day shipping) 03 (Overnight shipping) 04 (Two-day or more shipping)   └─➔ preOrderDate string For a pre-ordered purchase. The expected date that the merchandise will be available. Format: YYYYMMDD   └─➔ preOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)   └─➔ shipIndicator string Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address) 02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes) 06 (Travel and Event tickets, not shipped) 07 (Other, e.g. gaming, digital service)   └─➔ giftCardPurchase bool true if this is a purchase of a gift card.   └─➔ reOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)   └➔ pickUpAddress object If shipIndicator set to 04, then prefill this with the payers pickUpAddress of the purchase to decrease the risk factor of the purchase.   └─➔ name string If shipIndicator set to 04, then prefill this with the payers name of the purchase to decrease the risk factor of the purchase.   └─➔ streetAddress string If shipIndicator set to 04, then prefill this with the payers streetAddress of the purchase to decrease the risk factor of the purchase.   └─➔ coAddress string If shipIndicator set to 04, then prefill this with the payers coAddress of the purchase to decrease the risk factor of the purchase.   └─➔ city string If shipIndicator set to 04, then prefill this with the payers city of the purchase to decrease the risk factor of the purchase.   └─➔ zipCode string If shipIndicator set to 04, then prefill this with the payers zipCode of the purchase to decrease the risk factor of the purchase.   └─➔ countryCode string If shipIndicator set to 04, then prefill this with the payers countryCode of the purchase to decrease the risk factor of the purchase. Response The response back should look something like this (abbreviated for brevity): Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 HTTP/1.1 201 Created Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/\" }, \"operations\": [ { \"href\": \"/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=&amp;culture=sv-SE\", \"rel\": \"view-paymentorder\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } Field Type Description paymentorder object The payment order object. └➔ id string The relative URI and unique identifier of the paymentorder resource . Please read about URI Usage to understand how this and other URIs should be used in your solution. operations array The array of possible operations to perform, given the state of the payment order. The paymentorder object is abbreviated since it’s just the id and operations we are interested in. Store the id of the Payment Order in your system to look up status on the completed payment later. Then find the view-paymentorder operation and embed its href in a &lt;script&gt; element. That script will then load the Seamless View for the Payment Menu. We will look into how to hook that up next. info orderReference must be sent as a part of the POST request to paymentorders and must represent the order ID of the webshop or merchant website. Step 4: Display the Payment Menu To load the payment menu from the JavaScript URL obtained in the back end API response, it needs to be set as a script element’s src attribute. You can cause a page reload and do this with static HTML or you can avoid the page refresh by invoking the POST to create the payment order through Ajax and then create the script element with JavaScript, all inside the event handler for onConsumerIdentified. The HTML code will be unchanged in this example. JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 var request = new XMLHttpRequest(); request.addEventListener('load', function () { // We will assume that our own backend returns the // exact same as what SwedbankPay returns. response = JSON.parse(this.responseText); var script = document.createElement('script'); // This assumes the operations from the response of the POST of the // payment order is returned verbatim from the server to the Ajax: var operation = response.operations.find(function (o) { return o.rel === 'view-consumer-identification'; }); script.setAttribute('src', operation.href); script.onload = function () { payex.hostedView.consumer({ // The container specifies which id the script will look for // to host the checkin component container: 'checkin', onConsumerIdentified: function onConsumerIdentified(consumerIdentifiedEvent) { // When the consumer is identified, we need to perform an AJAX request // to our server to forward the consumerProfileRef in a server-to-server // POST request to the Payment Orders resource in order to initialize // the Payment Menu. var request = new XMLHttpRequest(); request.addEventListener('load', function () { response = JSON.parse(this.responseText); // This is identical to how we get the 'view-consumer-identification' // script from the check-in. var script = document.createElement('script'); var operation = response.operations.find(function (o) { return o.rel === 'view-paymentorder'; }); script.setAttribute('src', operation.href); script.onload = function () { // When the 'view-paymentorder' script is loaded, we can initialize the // Payment Menu inside our 'payment-menu' container. payex.hostedView.paymentMenu({ container: 'payment-menu', culture: 'sv-SE' }).open(); }; // Append the Payment Menu script to the &lt;head&gt; var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Like before, you should replace the address here with // your own endpoint. request.open('POST', '&lt;Your-Backend-Endpoint-Here&gt;', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // In this example, we send the entire Consumer Identified Event Argument // Object as JSON to the server, as it contains the consumerProfileRef. request.send(JSON.stringify(consumerIdentifiedEvent)); }, onShippingDetailsAvailable: function onShippingDetailsAvailable(shippingDetailsAvailableEvent) { console.log(shippingDetailsAvailableEvent); } }).open(); }; // Appending the script to the head var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Place in your own API endpoint here. request.open('POST', '&lt;Your-Backend-Endpoint-Here&gt;', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // We send in the previously mentioned request here to the checkin endpoint. request.send(JSON.stringify({ operation: 'initiate-consumer-session', language: 'sv-SE', shippingAddressRestrictedToCountryCodes : ['NO', 'SE'] })); This should bring up the Payment Menu in a Seamless View. It should look like this, depending on whether the payer is logged in (top) or a guest user (bottom): When the consumer completes the payment, the Payment Menu script will be signaled and a full redirect to the completeUrl sent in with the Payment Order will be performed. When the completeUrl on your server is hit, you can inspect the status on the stored paymentorder.id on the server, and then perform capture. If the payment is a Sale or one-phase purchase, it will be automatically captured. A third scenario is if the goods are sent physically to the payer; then you should await capture until after the goods have been sent. You may open and close the payment menu using .open() and .close() functions. You can also invoke .refresh() to update the Payment Menu after any changes to the order. Below, you will see a complete overview of the payment menu process. Notice that there are two ways of performing the payment: Consumer perform payment out of iframe. Consumer perform payment within iframe. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(138, 205, 195, 0.1) activate Payer note left of Payer: Payment Menu Payer -&gt;&gt;+ Merchant: Initiate Purchase deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: POST /psp/paymentorders (paymentUrl, payer) deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel:view-paymentorder deactivate SwedbankPay Merchant --&gt;&gt;- Payer: Display Payment Menu on Merchant Page activate Payer Payer -&gt;&gt; Payer: Initiate Payment Menu Hosted View (open iframe) Payer --&gt;&gt;+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay -&gt;&gt;+ Payer: Do payment logic deactivate SwedbankPay opt Consumer perform payment out of iFrame Payer -&gt;&gt; Payer: Redirect to 3rd party Payer -&gt;&gt;+ 3rdParty: Redirect to 3rdPartyUrl URL deactivate Payer 3rdParty --&gt;&gt;+ Payer: Redirect back to paymentUrl (merchant) deactivate 3rdParty Payer -&gt;&gt; Payer: Initiate Payment Menu Hosted View (open iframe) Payer -&gt;&gt;+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay -&gt;&gt; Payer: Do payment logic end SwedbankPay --&gt;&gt; Payer: Payment status deactivate SwedbankPay alt If payment is completed activate Payer Payer -&gt;&gt; Payer: Event: onPaymentCompleted Payer -&gt;&gt;+ Merchant: Check payment status deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET &lt;paymentorder.id&gt; deactivate Merchant SwedbankPay -&gt;&gt;+ Merchant: rel: paid-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if paid-paymentorder operation exist) activate Payer deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET rel: paid-paymentorder deactivate Merchant SwedbankPay --&gt;&gt; Merchant: Payment Details deactivate SwedbankPay end end opt If payment is failed activate Payer Payer -&gt;&gt; Payer: Event: OnPaymentFailed Payer -&gt;&gt;+ Merchant: Check payment status deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET {paymentorder.id} deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel: failed-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if failed-paymentorder operation exist) activate Payer deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET rel: failed-paymentorder deactivate Merchant SwedbankPay --&gt;&gt; Merchant: Payment Details deactivate SwedbankPay end end activate Merchant Merchant --&gt;&gt;- Payer: Show Purchase complete opt PaymentOrder Callback (if callbackUrls is set) activate Payer deactivate Payer SwedbankPay -&gt;&gt; Merchant: POST Payment Callback end end Now that you have completed the Payment Menu integration, you can move on to finalizing the payment in the After Payment section. Back: Checkin Next: Capture",
    "tags": "",
    "url": "/checkout/payment-menu.html"
  },{
    "title": "Payment Orders",
    "text": "Payment Orders The paymentorders resource is used when initiating a payment process through Payment Menu and Swedbank Pay Checkout. The payment order is a container for the payment instrument object selected by the payer. This will generate a payment that is accessed through the sub-resources payments and currentPayment. Request 1 2 3 4 GET /psp/paymentorders// HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders//urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders//payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders//settings\" }, \"payers\": { \"id\": \"/psp/paymentorders//payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders//orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders//metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders//payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders//currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"/psp/paymentorders/\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] } Field Type Description paymentorder object The payment order object. └➔ id string The relative URI and unique identifier of the paymentorder resource . Please read about URI Usage to understand how this and other URIs should be used in your solution. └➔ created string The ISO-8601 date of when the payment order was created. └➔ updated string The ISO-8601 date of when the payment order was updated. └➔ operation string Purchase └➔ state string Ready, Pending, Failed or Aborted. Indicates the state of the payment order. Does not reflect the state of any ongoing payments initiated from the payment order. This field is only for status display purposes. └➔ currency string The currency of the payment order. └➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. └➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. └➔ description string(40) A 40 character length textual description of the purchase. └➔ userAgent string The [user agent][user-agent] string of the consumer’s browser. └➔ language string sv-SE, nb-NO or ee-EE. └➔ urls string The URI to the urls resource where all URIs related to the payment order can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment order can be retrieved. └➔ payers string The URI to the payers resource where information about the payee of the payment order can be retrieved. └➔ orderItems string The URI to the orderItems resource where information about the order items can be retrieved. └➔ metadata string The URI to the payments resource where information about all underlying payments can be retrieved. └➔ payments string The URI to the payments resource where information about all underlying payments can be retrieved. └➔ currentPayment string The URI to the currentPayment resource where information about the current – and sole active – payment can be retrieved. └➔ operations array The array of possible operations to perform, given the state of the payment order. [See Operations for details][operations]. Payment Orders 2 The paymentorders resource is used when initiating a payment process through Payment Menu and Swedbank Pay Checkout. The payment order is a container for the payment instrument object selected by the payer. This will generate a payment that is accessed through the sub-resources payments and currentPayment. Request 1 2 3 4 GET /psp/paymentorders// HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders//urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders//payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders//settings\" }, \"payers\": { \"id\": \"/psp/paymentorders//payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders//orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders//metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders//payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders//currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"/psp/paymentorders/\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] } Field Type Description paymentorder object The payment order object. └➔ id string The relative URI and unique identifier of the paymentorder resource . Please read about URI Usage to understand how this and other URIs should be used in your solution. └➔ created string The ISO-8601 date of when the payment order was created. └➔ updated string The ISO-8601 date of when the payment order was updated. └➔ operation string Purchase └➔ state string Ready, Pending, Failed or Aborted. Indicates the state of the payment order. Does not reflect the state of any ongoing payments initiated from the payment order. This field is only for status display purposes. └➔ currency string The currency of the payment order. └➔ amount integer The amount (including VAT, if any) to charge the payer, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. └➔ vatAmount integer The amount of VAT to charge the payer, entered in the lowest monetary unit ofthe selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. If the amount given includes VAT, vatAmount may be displayed for the user inthe payment page (redirect only). Set to 0 (zero) if there is no VAT amount charged. └➔ description string(40) A 40 character length textual description of the purchase. └➔ userAgent string The [user agent][user-agent] string of the consumer’s browser. └➔ language string sv-SE, nb-NO or ee-EE. └➔ urls string The URI to the urls resource where all URIs related to the payment order can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment order can be retrieved. └➔ payers string The URI to the payers resource where information about the payee of the payment order can be retrieved. └➔ orderItems string The URI to the orderItems resource where information about the order items can be retrieved. └➔ metadata string The URI to the payments resource where information about all underlying payments can be retrieved. └➔ payments string The URI to the payments resource where information about all underlying payments can be retrieved. └➔ currentPayment string The URI to the currentPayment resource where information about the current – and sole active – payment can be retrieved. └➔ operations array The array of possible operations to perform, given the state of the payment order. [See Operations for details][operations].",
    "tags": "",
    "url": "/checkout/features/payment-orders.html"
  },{
    "title": "Recurring payments",
    "text": "Recurring Payments If you want to enable subsequent recurring – server-to-server – payments, you need to create a recurrence token. This token will be utilized after the initial payment order. Recurring payments must be activated on the contract with Swedbank Pay in order to work. Recurrence Token 2 When initiating a Purchase payment order, you need to make sure that the field generateRecurrenceToken is set to true. This recurrence token will stored in the [authorization transaction][transaction] sub-resource on the underlying payment resource. When initiating a Verify payment order, a recurrence token will be generated automatically. This recurrence token is stored in the [verification][verification-transaction] sub-resource on the underlying payment resource. You can view the current payment resource, containg the recurrence token and other payment instrument properties, by [expanding the sub-resource][expanding] [currentpayment][current-payment] when doing a GET request on the paymentorders resource. Request 1 2 GET /psp/paymentorders/?$expand=currentpayment HTTP/1.1 Host: Creating Recurring Payments When you have a recurrenceToken token safely tucked away, you can use this token in a subsequent Recur payment order. This will be a server-to-server affair, as we have tied all necessary payment instrument details related to the recurrence token during the initial payment order. Recurring Payments 2 If you want to enable subsequent recurring – server-to-server – payments, you need to create a recurrence token. This token will be utilized after the initial payment order. Recurring payments must be activated on the contract with Swedbank Pay in order to work. Recurrence Token 2 When initiating a Purchase payment order, you need to make sure that the field generateRecurrenceToken is set to true. This recurrence token will stored in the [authorization transaction][transaction] sub-resource on the underlying payment resource. When initiating a Verify payment order, a recurrence token will be generated automatically. This recurrence token is stored in the [verification][verification-transaction] sub-resource on the underlying payment resource. You can view the current payment resource, containg the recurrence token and other payment instrument properties, by [expanding the sub-resource][expanding] [currentpayment][current-payment] when doing a GET request on the paymentorders resource. Request 1 2 GET /psp/paymentorders/?$expand=currentpayment HTTP/1.1 Host: Creating Recurring Payments 2 When you have a recurrenceToken token safely tucked away, you can use this token in a subsequent Recur payment order. This will be a server-to-server affair, as we have tied all necessary payment instrument details related to the recurrence token during the initial payment order. Recurring Payments 3 If you want to enable subsequent recurring – server-to-server – payments, you need to create a recurrence token. This token will be utilized after the initial payment order. Recurring payments must be activated on the contract with Swedbank Pay in order to work. Recurrence Token 3 When initiating a Purchase payment order, you need to make sure that the field generateRecurrenceToken is set to true. This recurrence token will stored in the [authorization transaction][transaction] sub-resource on the underlying payment resource. When initiating a Verify payment order, a recurrence token will be generated automatically. This recurrence token is stored in the [verification][verification-transaction] sub-resource on the underlying payment resource. You can view the current payment resource, containg the recurrence token and other payment instrument properties, by [expanding the sub-resource][expanding] [currentpayment][current-payment] when doing a GET request on the paymentorders resource. Request 1 2 GET /psp/paymentorders/?$expand=currentpayment HTTP/1.1 Host: Creating Recurring Payments 3 When you have a recurrenceToken token safely tucked away, you can use this token in a subsequent Recur payment order. This will be a server-to-server affair, as we have tied all necessary payment instrument details related to the recurrence token during the initial payment order.",
    "tags": "",
    "url": "/checkout/features/recurring-payments.html"
  },{
    "title": "Release Notes",
    "text": "info Version numbers The version numbers used in headers on this page refers to the version of this very documentation, not to a version of any APIs described by it. 28 May 2020 Version 1.11.0 Added a new Trustly Payments section. Added information about Storing URIs in the Technical Information section. 23 May 2020 Version 1.10.1 Updated Swish Redirect requests. Added orderReference information in Payment Order Callback in Checkout Other features. 10 May 2020 Version 1.10.0 Added a new Gift Cards section with descriptions of our Gift Cards API. Added a new section Co-badge Card Choice for Dankort in Card Payments. 02 May 2020 Version 1.9.2 Corrected table in payments page 01 May 2020 Version 1.9.1 Corrected sequence diagrams in Swish Payments and Vipps Payments. The description field is now more thoroughly described for all requests it’s present in. The language field is now better described for all requests it’s present in. All broken links should now be unbroken. April 2020 Version 1.9.0 Added a new section SDKs and Modules in Resources. Corrected problem type URIs for Card Payments, Checkout and Swish Payments. Required checkmarks have a new, fresh look: check Flags now also sport a new look: Version 1.8.3 Bug fixes to Mermaid diagram and alert styling, plus improvements to code block styling after the update to Swedbank Pay Design Guide 4.5.0. Added examples with screenshots of the effects of Merchant Authenticated Consumer. Version 1.8.2 Added a more thorough description on paymentUrl and completeUrl in all relevant payments. Updated orderItems to be required in all requests and responses. Clean up of Swish Payments Removed pageStripDown in Vipps Redirect. Updated Card Payments Direct to have a correct integration flow. Updated the main page to be more welcoming. Updated information on Merchant Authenticated Consumer. March 2020 Version 1.8.1 Documented allowed characters in orderItem.class. Added receiptReference in Invoice Payments and Payment Order in capture and reversal. Callback is now moved to Other features in all payments intruments. Clean up of MobilePay. Corrected the address of Leia Ahlström in Test Data. Updated the documentation in Card Payments to recommend using shippingAddress. Updated payeeReference to have an unique description for Payment Order and every Payment Instrument. Version 1.8.0 Updated Invoice Payments Direct where approvedLegalAddress should now be use for all countries. Small text changes and clarifications. Restructured Invoice Payments and Card Payments. Version 1.7.7 This change contains build updates for the page. :octocat: Version 1.7.6 Several links has been corrected. The chance of 404 is now much lower. Other small text changes and clarifications. Version 1.7.5 New page! Technical reference into has been moved from the front page to technical information. Front page got a slimmer look. :swimmer: Abort reference is back in credit card reference. Swish error code reference got a face lift, check it out here :candy:. February 2020 Version 1.7.4 Described the M-Commerce flow for Swish Direct. Alphabetize the terms in Terminology. Version 1.7.3 Expanded information about the field restrictedToInstruments. Added information about the field receiptReference. Added information about direct integration in Credit card. Added and fixed several missing headings in template files. Expanded information about verify. Created new page for Checkout Capture. Mobile Pay Online was previously only refered to as Mobile Pay, this has been corrected. Version 1.7.2 Removed several duplicate headers in other-features pages. Added unscheduled purchase information in card payments. We have added card logos when selecting card in payment menu. See updated screenshot of payment menu. Version 1.7.1 All sections have been released. :trophy: Version 1.7 README is updated with info about includes. Added several includes. Updated payeeReference description in Checkout and Invoice section. Using snake case consistently. Added section for unscheduled purchase in Card section. Fixed JavaScript example in Checkin section. Added info about mobile verification in Swish Other Features. Added section about Authenticated Merchants in Checkout section. Cleanup in Vipps Other Features. paymentRestrictedToAgeLimit and paymentRestrictedToSocialSecurityNumber added to swish object in Swish Redirect. paymentAgeLimit , socialSecurityNumber added to the new payerInfo object in Swish Seamless View. Properties added in Swish. Added section about migration key in Resources section. January 2020 Version 1.6.3 restrictedToInstruments added back to Payment Order purchase requests. Direct Debit section and mentions in various includes removed. Various improvements and fixes. Version 1.6.2 The Payments and Card Payments sections are reviewed and released. Version 1.6.1 email, msisdn, workPhoneNumber and homePhoneNumber added to the payer object in Payment Order requests. cardholder added to Card Payments Purchase requests. Various improvements and fixes. Version 1.6 Credit Payments (née “Credit Account”) sections have been deleted from the Swedbank Pay Developer Portal. The Swish Payments and Vipps Payments have received a few updates and are now ready for another round of review. MobilePay Payments is now ready for review. paymentAgeLimit is now added in Swish Payments. The Terminology page is updated and 3-D Secure 2.0 (3DS2) , PSD2 and SCA explanations are added. Added descriptions for Payment States And Transaction States everywhere appropriate. Google Analytics has been added to Developer Portal. Version 1.5 The review of Invoice Payments is complete and as such the section is now released and ready for use. The Card Payments section has received an overhaul, inching it closer to release. The Swish Payments and Vipps Payments sections are ready for review. The Direct Debit, MobilePay Payments and Credit Payments (née “Credit Account”) sections have received a few updates, inching them all closer to review. Version 1.4 Updated Swish Redirect and Swish Direct sections in preparations for review and the transition from PayEx Developer Portal. Added Data Protection section. Payment Orders now support orderItems in all operations. Added Terminology page. Clarified what the awaitingActivity state means for different payment instruments. Removed erroneous noCVC in examples for One-Click Card Payments section. Added description for the onBillingDetailsAvailable event in the Checkin Front End section. December 2019 Update in checkin module We have added support for specifying language as input in checkin module, language. Supported languages are Norwegian, Swedish and English. Consumers outside Sweden and Norway can now purchase in our Checkout service. You can specify supported countries for shipment in a new input parameter, shippingAddressRestrictedToCountryCodes, in our checkin module. Updated API specification can be found here. The parameters language and shippingAddressRestrictedToCountryCodes have replaced the former consumerCountryCode. The parameters msisdn and email have been made obsolete due to GDPR rules. This information cannot be sent in without an explicit consent from the consumer. November 2019 Welcome, Swedbank Pay Developer Portal PayEx’ Commerce offerings are being rebranded to Swedbank Pay and as a result of that rebranding, PayEx Checkout is now known as Swedbank Pay Checkout and its documentation can be found on here. Support international phone numbers in Swish We have added support for sending in international phone numbers in the request. Check our Swish documentation here. This is supported in API, and when consumer enters their phone number on the payment page. Order Items The input parameter quantity in OrderItems-node is now updated to decimal. You may send up to 4 decimals. See updated documentation here October 2019 Payment Url Credit Card We have added the URL field called paymentUrl for Card Seamless View (previously added for Vipps and Checkout), that will be used when the user is returned from 3rd party. The URL should represent the page in where the payment Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the hosted payment view was added, in order to initiate the payment. Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment as the one that initiated the payment originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. When the JavaScript is invoked after return of the consumer, the consumer will either be redirected to the completeUrl (event onPaymentCompleted) or if payment has failed, see an error-message and get the option to retry the payment. August 2019 Order Items in payment orders On Payment Orders, itemDescriptions and vatSummary has been replaced with the more versatile and powerful orderItems. While itemDescriptions will continue to work, it is recommended that all integrations switch over to orderItems as soon as possible. When orderItems is used, itemDescriptions must be removed from all requests as the two cannot be used simultaneously. Payment Url For our Seamless Views (currently Vipps or in Checkout), we have added a new URL field called paymentUrl that will be used when user is returned from 3rd party. The URL should represent the page of where the payment hosted view was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the hosted payment view was added to in order to initiate the payment. Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment or Payment Order as the one that initiated the payment originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment or Payment Order stored. When the JavaScript is invoked after return of the consumer, the consumer will either be redirected to the completeUrl, or, if payment failed, see an error-message, and get the option to retry the payment. If paymentUrl is not implemented, retry of payments will not be possible in either individual payment instruments such as Vipps or in Checkout. It makes it more tedious to retry payment as the whole process including the creation of the payment or payment order needs to be performed again. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer.",
    "tags": "",
    "url": "/resources/release-notes.html"
  },{
    "title": "Search",
    "text": "Hidden true.",
    "tags": "",
    "url": "/search.html"
  },{
    "title": "Gift Cards – Security",
    "text": "OAuth2 The Gift Card API requires an OAuth2 access token for interaction. This application automatically handles token fetching and refreshing by using Spring Security. Configuration values are set in application.yml: 1 2 3 4 5 6 7 8 9 10 11 # \"XXX\" Should be replaced by value provided by Swebank Pay # CLIENT_ID/CLIENT_SECRET/VAS_AUTH_SERVER_URL can also be set in docker-compose.yml as environment variables if running with docker vas-payment-api: oauth2: client: grantType: client_credentials clientId: \"${CLIENT_ID}:XXX\" clientSecret: \"${CLIENT_SECRET}:XXX\" accessTokenUri: \"${VAS_AUTH_SERVER_URL}:XXX\" scope: publicapi And the implementation of these are located in Oauth2RestTemplateConfiguration.java: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class Oauth2RestTemplateConfiguration { //... @Bean @ConfigurationProperties(\"vas-payment-api.oauth2.client\") protected ClientCredentialsResourceDetails oAuthDetails() { return new ClientCredentialsResourceDetails(); } @Bean protected RestTemplate restTemplate() { var restTemplate = new OAuth2RestTemplate(oAuthDetails()); restTemplate.setInterceptors(ImmutableList.of(externalRequestInterceptor())); restTemplate.setRequestFactory(httpRequestFactory()); return restTemplate; } //... } HMAC A Hash-based Message Authentication Code (HMAC) is used to verify the data integrity and authenticity of the HTTP requests made towards our API. An HMAC header therefore needs to be present in every request. In this client the HMAC value is automatically calculated by HmacSignatureBuilder.java and added to all outgoing requests in ExternalRequestInterceptor.java HMAC is implemented using SHA-512 secure hash algorithm. Expected Hmac header format is: 1 HmacSHA512 &lt;user&gt;:&lt;nonce&gt;:&lt;digest&gt; where digest is a Base64 formatted HMAC SHA512 digest of the following string: 1 2 3 4 5 6 METHOD\\n RESOURCE\\n USER\\ NONCE\\n DATE\\n PAYLOAD\\n Required Field Description check METHOD The requested method (in upper case) check RESOURCE The path to desired resource (without hostname and any query parameters) check NONSE A unique value for each request (UUID   DATE Same as Transmission-Time if provided as seperate header. Uses ISO8601 standard   PAYLOAD The body of request Example request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 curl -X POST \\ https://stage-evc.payex.com/payment-api/api/payments/payment-account/balance \\ -H 'Accept: */*' \\ -H 'Agreement-Merchant-Id: XXX' \\ -H 'Authorization: Bearer XXX' \\ -H 'Hmac: HmacSHA512 user:21a0213e-30eb-85ab-b355-a310d31af30e:oY5Q5Rf1anCz7DRm3GyWR0dvJDnhl/psylfnNCn6FA0NOrQS3L0fvyUsQ1IQ9gQPeLUt9J3IM2zwoSfZpDgRJA==' \\ -H 'Transmission-Time: 2019-06-18T09:19:15.208257Z' \\ -H 'Session-Id: e0447bd2-ab64-b456-b17b-da274bb8428e' \\ -d '{ \"accountIdentifier\": { \"accountKey\": \"7013369000000000000\", \"cvc\": \"123\", \"expiryDate\": \"2019-12-31\", \"instrument\": \"GC\" } }' In this example USER is user and SECRET is secret. The plain text string to digest would then look like the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 POST /payment-api/api/payments/payment-account/balance user 21a0213e-30eb-85ab-b355-a310d31af30e 2019-06-18T09:19:15.208257Z { \"accountIdentifier\": { \"accountKey\": \"7013360000000000000\", \"cvc\": \"123\", \"expiryDate\": \"2020-12-31\", \"instrument\": \"CC\" } } The plain digest string is then hashed with HmacSHA512 algorithm and the SECRET. Finally we base 64 encode the hashed value. This is the final digest to be provided in the Hmac header. Final Hmac header value: 1 HmacSHA512 user:21a0213e-30eb-85ab-b355-a310d31af30e:oY5Q5Rf1anCz7DRm3GyWR0dvJDnhl/psylfnNCn6FA0NOrQS3L0fvyUsQ1IQ9gQPeLUt9J3IM2zwoSfZpDgRJA== Postman example script for generation HMAC header In pre-request script copy/paste the following snippet. JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 var user = 'Systemtest'; var secret = 'Systemtest'; var transmissionTime = (new Date()).toISOString(); var sessionId = guid(); var hmac = generateHMAC(user, secret, transmissionTime); console.log('hmac: ' + hmac); //Set header values pm.request.headers.add({key: 'Hmac', value: hmac }); pm.request.headers.add({key: 'Transmission-Time', value: transmissionTime }); pm.request.headers.add({key: 'Session-Id', value: sessionId }); function generateHMAC(user, secret, transmissionTime) { var algorithm = \"HmacSHA512\"; var separator = \":\"; var method = request.method.toUpperCase(); var nonce = generateNonce(); //UUID var date = transmissionTime; var uri_path = request.url.trim().replace(new RegExp('^https?://[^/]+/'), '/'); // strip hostname uri_path = uri_path.split(\"?\")[0]; //Remove query paramters var payload = _.isEmpty(request.data) ? \"\" : request.data; var macData = method + '\\n' + uri_path + '\\n' + user + '\\n' + nonce + '\\n' + date + '\\n' + payload + '\\n'; macData = replaceRequestEnv(macData); console.log('data to mac: ' + macData); var hash = CryptoJS.HmacSHA512(macData, secret); var digest = CryptoJS.enc.Base64.stringify(hash); return algorithm + \" \" + user + separator + nonce + separator + digest; } function replaceRequestEnv(input) { //manually set environments to they are populated before hashing return input.replace(/\\{\\{(.*?)\\}\\}/g, function (str, key) { var value = pm.environment.get(key); return value === null ? pm.varables.get(key) : value; }); } function generateNonce() { return guid(); } function guid() { function s4() { return Math.floor((1 + Math.random()) * 0x10000) .toString(16) .substring(1); } return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4(); } Security Documentation OAuth2 Client Credentials The RESTful CookBook: HMAC HMAC - Wikipedia Test client For more information how to implement the api, see Test Client.",
    "tags": "",
    "url": "/gift-cards/security.html"
  },{
    "title": "Secrets in payments",
    "text": "Don’t render this Payments have plenty of secrets due to it being secure and mostly encrypted. Only the end user and their bank can really see much data if any. We in between mostly see tokens.",
    "tags": "",
    "url": "/payments/secrets/super-secret.html"
  }]};
