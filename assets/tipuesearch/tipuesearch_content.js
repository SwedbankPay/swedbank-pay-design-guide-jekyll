var tipuesearch = {"pages": [{
    "title": "",
    "text": "# Uh oh:heavy_exclamation_mark: Seems like you have taken a wrong turn somewhere :construction: :dragon: This page seems to play hide and seek with you. :dragon_face: :circus_tent: Perhaps attempting a search or clicking around in the menus will help? :space_invader: Or perhaps your :princess: is in another castle? :mushroom:",
    "tags": "",
    "url": "/404.html"
  },{
    "title": "After Payment",
    "text": "{% include jumbotron.html body=\"When the consumer has **completed** the entire [Checkin](checkin) and [Payment Menu](payment-menu), you need to implement the relevant **after-payment operations** in your order system. Which these operations are and how they are executed is described below.\" %} ## Introduction Below is the final part of the sequence diagram illustrating how a capture operation is performed. ```mermaid sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant ->>+ SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay -->>- Merchant: Capture status note right of Merchant: Capture here only if the purchasedgoods don't require shipping.If shipping is required, perform captureafter the goods have shipped.Should only be used for PaymentInstruments that support Authorizations. end ``` ## Operations Most payment instruments are two-phase payments – in which a successful payment order will result in an authorized transaction – that must be followed up by a capture or cancellation transaction in a later stage. One-phase payments like Swish are settled directly without the option to capture or cancel. For a full list of the available operations, see the. {:.table .table-striped} | Operation | Description | | :----------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `create-paymentorder-capture` | The second part of a two-phase transaction where the authorized amount is sent from the payer to the payee. It is possible to do a part-capture on a subset of the authorized amount. Several captures on the same payment are possible, up to the total authorization amount. | | `create-paymentorder-cancel` | Used to cancel authorized and not yet captured transactions. If a cancellation is performed after doing a part-capture, it will only affect the not yet captured authorization amount. | | `create-paymentorder-reversal` | Used to reverse a payment. It is only possible to reverse a payment that has been captured and not yet reversed. | To identify the operations that are available we need to do a `GET` request against the URI of `paymentorder.id`: {:.code-view-header} **Request** ```http GET /psp/paymentorders/{{ page.payment_order_id }} HTTP/1.1 Authorization: Bearer ``` The (abbreviated) response containing an `updateorder`, `capture`, `cancellation`, and `reversal` operation should look similar to the response below: {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"paymentOrder\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}\" }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/paymentorders/{{ page.payment_order_id }}\", \"rel\": \"update-paymentorder-updateorder\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/paymentorders/{{ page.payment_order_id }}/captures\", \"rel\": \"create-paymentorder-capture\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/paymentorders/{{ page.payment_order_id }}/cancellations\", \"rel\": \"create-paymentorder-cancel\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/paymentorders/{{ page.payment_order_id }}/reversals\", \"rel\": \"create-paymentorder-reversal\", \"contentType\": \"application/json\" } ] } ``` {:.table .table-striped} | Field | Type | Description | | :------------- | :------- | :--------------------------------------------------------------------------------- | | `paymentorder` | `object` | The payment order object. | | └➔&nbsp;`id` | `string` | | | `operations` | `array` | The array of possible operations to perform, given the state of the payment order. | {% include alert.html type=\"informative\" icon=\"info\" body=\" Note that all of the operations `Cancel`, `Capture` and `Reversal` must be implemented.\" %} {% include iterator.html prev_href=\"capture\" prev_title=\"Back: Capture\" next_href=\"\" next_title=\"Next: Other Features\" %} [https]: /home/technical-information#connection-and-protocol [msisdn]: https://en.wikipedia.org/wiki/MSISDN [payee-reference]: /checkout/other-features#payee-reference [payment-order-operations]: /checkout/other-features#operations [payment-menu-back-end]: /payment#payment-menu-back-end [payment-menu-front-end]: /payment#payment-menu-front-end",
    "tags": "",
    "url": "/checkout/after-payment.html"
  },{
    "title": "After payment is completed",
    "text": "## After paaaayment Payment is done? Great, here is what will happen now. First we'll subtract the money from your account, then a wizard will attempt a grand spell to carry the money on the back of ants to transfer it to a safe place. A secret place. A place with a secret.",
    "tags": "",
    "url": "/checkout-more/after-payment.html"
  },{
    "title": "Alpha",
    "text": "",
    "tags": "",
    "url": "/resources/alpha.html"
  },{
    "title": "Beta",
    "text": "",
    "tags": "",
    "url": "/resources/beta.html"
  },{
    "title": "Swedbank Pay Checkout – Capture",
    "text": "## Step 5: Capture the funds Capture can only be done on a payment with a successful authorized transaction, and if the authorization was not done on a one-phase payment instrument. Examples of one-phase payment instruments are Swish and Vipps, while payment instruments such as Credit Card are two-phase payments, requiring a `Capture` to be performed. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can later do more captures on the same payment up to the total authorization amount. This is done by requesting the order information from the server, to get the request link to perform the capture. With this, you can request the capture with the sum to capture, and get back the status. ```mermaid sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant ->>+ SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay -->>- Merchant: Capture status note right of Merchant: Capture here only if the purchasedgoods don't require shipping.If shipping is required, perform captureafter the goods have shipped.Should only be used for PaymentInstruments that support Authorizations. end ``` To capture the authorized payment, we need to perform `create-paymentorder-capture` against the accompanying `href` returned in the `operations` list. See the abbreviated request and response below: {:.code-header} **Request** ```http POST /psp/paymentorders/{{ page.payment_order_id }}/captures HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } ``` **Et voilà!** Checkout should now be complete, the payment should be secure and everyone should be happy. But, sometimes you also need to implement the cancellation and reversal operations described below. {% include iterator.html prev_href=\"payment-menu\" prev_title=\"Back: Payment Menu\" next_href=\"after-payment\" next_title=\"Next: After Payment\" %}",
    "tags": "",
    "url": "/checkout/capture.html"
  },{
    "title": "Deck 2 Card 1",
    "text": "",
    "tags": "",
    "url": "/cards/deck2/card1.html"
  },{
    "title": "Deck 3 Card 1",
    "text": "",
    "tags": "",
    "url": "/cards/deck3/card1.html"
  },{
    "title": "Deck 1 Card 1",
    "text": "",
    "tags": "",
    "url": "/cards/deck1/card1.html"
  },{
    "title": "Deck 2 Card 2",
    "text": "",
    "tags": "",
    "url": "/cards/deck2/card2.html"
  },{
    "title": "Deck 3 Card 2",
    "text": "",
    "tags": "",
    "url": "/cards/deck3/card2.html"
  },{
    "title": "Deck 1 Card 2",
    "text": "",
    "tags": "",
    "url": "/cards/deck1/card2.html"
  },{
    "title": "Deck 2 Card 3",
    "text": "",
    "tags": "",
    "url": "/cards/deck2/card3.html"
  },{
    "title": "Deck 3 Card 3",
    "text": "",
    "tags": "",
    "url": "/cards/deck3/card3.html"
  },{
    "title": "Deck 1 Card 3",
    "text": "",
    "tags": "",
    "url": "/cards/deck1/card3.html"
  },{
    "title": "Checkin",
    "text": "## Step 1: Initiate session for consumer identification The payer will be identified with the `consumers` resource and will be persisted to streamline future Payment Menu processes. Payer identification is done through the `initiate-consumer-session` operation. {% include paragraph-highlight.html title=\"Optional integration\" body=\"The response from the POST of consumer information contains a few operations. The combination of rel, method and contentType should give you a clue how the operation should be performed. The view-consumer-identification operation and its application/javascript content type gives us a clue that the operation is meant to be embedded in a \\ ``` {% include alert.html type=\"informative\" icon=\"info\" body=\"The Checkin and Payment Menu components (the two `` elements) must be separate (one must not replace the other).\" %} In the HTML, you only need to add two `` elements to place the check-in and payment menu inside of. The JavaScript will handle the rest when it comes to handling the check-in and payment menu. {:.code-view-header} **JavaScript** ```js var request = new XMLHttpRequest(); request.addEventListener('load', function () { // We will assume that our own backend returns the // exact same as what SwedbankPay returns. var response = JSON.parse(this.responseText); var script = document.createElement('script'); // This assumes that the operations from the response of the POST from the // payment order is returned verbatim from the server to the Ajax: var operation = response.operations.find(function (o) { return o.rel === 'view-consumer-identification'; }); script.setAttribute('src', operation.href); script.onload = function () { payex.hostedView.consumer({ // The container specifies which id the script will look for // to host the checkin component container: 'checkin', onConsumerIdentified: function onConsumerIdentified(consumerIdentifiedEvent) { // consumerIdentifiedEvent.consumerProfileRef contains the reference // to the identified consumer which we need to pass on to the // Payment Order to initialize a personalized Payment Menu. console.log(consumerIdentifiedEvent); }, onShippingDetailsAvailable: function onShippingDetailsAvailable(shippingDetailsAvailableEvent) { console.log(shippingDetailsAvailableEvent); } }).open(); }; // Appending the script to the head var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Place in your own API endpoint here. request.open('POST', '', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // In this example we'll send in all of the information mentioned before, // in the request to the endpoint. request.send(JSON.stringify({ operation: 'initiate-consumer-session', language: 'sv-SE', shippingAddressRestrictedToCountryCodes: ['NO', 'SE'] })); ``` {% include alert.html type=\"informative\" icon=\"info\" body=\" Note that we add the script at the end of the body. This ensures that every element (like the container `` elements) has loaded in before we try to access them with our script.\" %} With the scripts loading in after the entire page is loaded, we can access the `` container that the Checkin will be hosted in. After that has all loaded, you should see something like this: As you can see, the payer's information is pre-filled as provided by the initial `POST`. With a `consumerProfileRef` safely tucked into our pocket, the Checkin is complete and we can move on to [Payment Menu][payment-menu]. A complete overview of how the process of identifying the payer through Checkin is illustrated in the sequence diagram below. ```mermaid sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(238, 112, 35, 0.05) note left of Payer: Checkin Payer ->>+ Merchant: Start Checkin Merchant ->>+ SwedbankPay: POST /psp/consumers deactivate Merchant SwedbankPay -->>+ Merchant: rel:view-consumer-identification ① deactivate SwedbankPay Merchant -->>- Payer: Show Checkin on Merchant Page Payer ->>+ Payer: Initiate Consumer Hosted View (open iframe) ② Payer ->>+ SwedbankPay: Show Consumer UI page in iframe ③ deactivate Payer SwedbankPay ->>- Payer: Consumer identification process activate Payer Payer ->>+ SwedbankPay: Consumer identification process deactivate Payer SwedbankPay -->>- Payer: show consumer completed iframe activate Payer Payer ->> Payer: EVENT: onConsumerIdentified (consumerProfileRef) ④ deactivate Payer end ``` If a browser refresh is performed after the payer has checked in, the payment menu must be shown even though `onConsumerIdentified` is not invoked. Additional events during Checkin can also be implemented in the `configuration` object, such as `onConsumerIdentified`, `onShippingDetailsAvailable`and `onBillingDetailsAvailable`. Read more about these in the section. ### Note on consumer data During this stage some consumer data is stored. Read more about our for details on which information we store and its duration. {% include iterator.html prev_href=\"./\" prev_title=\"Back: Introduction\" next_href=\"payment-menu\" next_title=\"Next: Payment Menu\" %} [capture-operation]: /checkout/after-payment#capture [checkin-image]: /assets/img/checkout/your-information.png [checkin-events]: /checkout/other-features#checkin-events [consumer-reference]: /checkout/other-features#payee-reference [data-protection]: /resources/data-protection#paymentorder-consumer-data [initiate-consumer-session]: /checkout/checkin#checkin-back-end [msisdn]: https://en.wikipedia.org/wiki/MSISDN [operations]: /checkout/other-features#operations [order-items]: #order-items [payee-reference]: /checkout/other-features#payee-reference [payment-menu-image]: /assets/img/checkout/payment-methods.png [payment-menu]: #payment-menu [payment-menu]: payment-menu [payment-order-capture]: /checkout/after-payment#capture [payment-order-operations]: /checkout/after-payment#operations [payment-order]: #payment-orders [paymentorder-items]: #items [technical-reference-onconsumer-identified]: /checkout/payment-menu-front-end [urls]: /checkout/other-features#urls-resource [user-agent]: https://en.wikipedia.org/wiki/User_agent",
    "tags": "",
    "url": "/checkout/checkin.html"
  },{
    "title": "Creditting?",
    "text": "## Don't read this If you see this. It means you are **credited**.",
    "tags": "",
    "url": "/payments/credit.html"
  },{
    "title": "Gamma",
    "text": "",
    "tags": "",
    "url": "/resources/gamma.html"
  },{
    "title": "Introduction",
    "text": "{:.heading-line} ## All features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/features/"
  },{
    "title": "Introduction",
    "text": "{% comment %} Examples on how site.pages can be filtered and used with card-list/card-horizontal-list. Can also be used with pre-defined lists, such as card_list in front matter above. {% endcomment %} {:.heading-line} ## Core implementation overview {% assign core_card_list = site.pages | where: 'dir', page.dir | where: 'core', true | where_exp: 'page', 'page.name != \"index.md\"' | sort: 'menu_order' %} {% include card-horizontal-list.html card_list=page.card_list %} {:.heading-line} ## Additional features {% assign additional_card_list = site.pages | where_exp: 'page', 'page.url != \"/checkout/\" and page.core != true and page.dir contains \"/checkout/\"' | where: 'additional', true | sort: 'menu_order' %} {% include card-list.html card_list=additional_card_list col_class=\"col-lg-6 col-md-6 col-sm-6\" %}",
    "tags": "",
    "url": "/checkout/"
  },{
    "title": "Sub-resources",
    "text": "",
    "tags": "",
    "url": "/resources/sub-resources/"
  },{
    "title": "Resources",
    "text": "[The page at the end of this link should redirect back here](/resources/redirect-from)",
    "tags": "",
    "url": "/resources/"
  },{
    "title": "Deck 2",
    "text": "",
    "tags": "",
    "url": "/cards/deck2/"
  },{
    "title": "Deck 3",
    "text": "",
    "tags": "",
    "url": "/cards/deck3/"
  },{
    "title": "Deck 1",
    "text": "",
    "tags": "",
    "url": "/cards/deck1/"
  },{
    "title": "Cards",
    "text": "# Deck 1 # Deck 2 # Deck 3 {% include card.html title='Default' text='This is a default card' icon_content='credit_card' to='deck1/card1' %} {% include card.html title='SDK' text='This is a .dx-card-sdk card' icon_content='settings' type='sdk' to='deck1/card1' %} {% include card.html title='module' text='This is a .dx-card-module card. This also has outlined icon' icon_content='build' icon_outlined=true type='module' to='/#cards' %} {% include card.html title='Horizontal' title_type='h3' text='This is a dx-card-horizontal card. Icons used with this card are just numbers' icon_content='01' horizontal=true to='/#cards' %}",
    "tags": "",
    "url": "/cards/"
  },{
    "title": "Secret payments",
    "text": "## How we do secret payments We don't.",
    "tags": "",
    "url": "/payments/secrets/"
  },{
    "title": "Payments",
    "text": "## Woah bby Here we list a few details about payment",
    "tags": "",
    "url": "/payments/"
  },{
    "title": "",
    "text": "## You'd like to checko out Great! Just check in first and we'll get you sorted.",
    "tags": "",
    "url": "/checkout-more/"
  },{
    "title": "Home",
    "text": "Text can be **bold**, _italic_, or ~~strikethrough~~. * [External absolute full link](https://www.wikipedia.org) * [External protocol relative link](//www.wikipedia.org) * Internal absolute full link * Internal explicit relative link * Internal implicit relative link * Internal absolute link There should be whitespace between paragraphs. There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. ## Header 2 This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. > This is a blockquote following a header. > > When something is important enough, you do it even if the odds are not in > your favor. ### Header 3 {:.code-view-header} JavaScript code with syntax highlighting. ```js var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } ``` {:.code-view-header} HTTP request ```http POST /psp/consumers HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer Content-Type: application/json { \"operation\": \"initiate-consumer-session\", \"msisdn\": \"+4798765432\", \"email\": \"olivia.nyhuus@example.com\", \"consumerCountryCode\": \"NO\", \"nationalIdentifier\": { \"socialSecurityNumber\": \"26026708248\", \"countryCode\": \"NO\" } } ``` {:.code-view-header} Response ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/{{ page.payment_id }}\", \"authorization\": { \"direct\": true, \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"issuingBank\": \"Utl. Visa\", \"paymentToken\": \"{{ page.payment_token }}\", \"maskedPan\": \"454778******3329\", \"expiryDate\": \"12/2020\", \"panToken\": \"cca2d98d-8bb3-4bd6-9cf3-365acbbaff96\", \"panEnrolled\": true, \"acquirerTransactionTime\": \"0001-01-01T00:00:00Z\", \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2020-03-10T13:15:01.9586254Z\", \"updated\": \"2020-03-10T13:15:02.0493818Z\", \"type\": \"Authorization\", \"state\": \"AwaitingActivity\", \"number\": 70100366758, \"amount\": 4201, \"vatAmount\": 0, \"description\": \"Test transaction\", \"payeeReference\": \"1583846100\", \"isOperational\": true, \"operations\": [ { \"method\": \"GET\", \"href\": \"https://api.stage.payex.com/psp/creditcard/confined/payments/authorizations/authenticate/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authentication\" } ] } } } ``` {:.code-view-header} JSON ```json { \"operation\": \"initiate-consumer-session\", \"msisdn\": \"+4798765432\", \"email\": \"olivia.nyhuus@example.com\", \"consumerCountryCode\": \"NO\", \"nationalIdentifier\": { \"socialSecurityNumber\": \"26026708248\", \"countryCode\": \"NO\" } } ``` Here's some ``{:.language-html .highlight} `{ \"code\": true }`{:.language-js .highlight} that should `.be { highlighted: according; }`{:.language-css .highlight} to their language. #### Header 4 * This is an unordered list following a header. * This is an unordered list following a header. * This is an unordered list following a header. ##### Header 5 1. This is an ordered list following a header. 2. This is an ordered list following a header. 3. This is an ordered list following a header. ###### Header 6 Here's a nice, striped table. {:.table .table-striped} | head1 | head two | three | | :----------- | :---------------- | :---- | | ok | good swedish fish | nice | | out of stock | good and plenty | nice | | ok | good `oreos` | hmm | | ok | good `zoute` drop | yumm | ## Mermaid ```mermaid sequenceDiagram participant Merchant participant SwedbankPay activate SwedbankPay SwedbankPay->>Merchant: POST activate Merchant note right of SwedbankPay: Callback POST by SwedbankPay Merchant->>SwedbankPay: Callback response deactivate Merchant deactivate SwedbankPay activate Merchant Merchant->>SwedbankPay: GET payment note left of Merchant: First API request activate SwedbankPay SwedbankPay-->>Merchant: payment resource deactivate SwedbankPay deactivate Merchant ``` ## Alerts {% include alert.html body='This is a standard alert.' %} {% include alert.html type='success' icon='check_circle' body='This is a successful alert.' %} {% include alert.html icon='info_outline' header='**Informational** *alert*' body='This is an **informational** alert *with* ``{:.language-html}.' %} {% include alert.html type='warning' icon='warning' header='`{ \"warning\": \"alert\" }`{:.language-js}' body='This is a **warning** alert with ``{:.language-html}.' %} ## Jumbotron {% include jumbotron.html body='**PayEx Checkout** is a complete reimagination of the checkout experience, integrating seamlessly into the merchant website through highly customizable and flexible components. Visit our [demoshop](https://ecom.externalintegration.payex.com/pspdemoshop) and try out PayEx Checkout for yourself!' %} ## Iterator {% include iterator.html next_href=\"page2\" %} {% include iterator.html prev_href=\"page1\" %} {% include iterator.html prev_href=\"page1\" prev_title=\"Go back\" next_href=\"page2\" next_title=\"Go forward\" %} ## There's a horizontal rule below this --- ## Here is an unordered list * Item foo * Item bar * Item baz * Item zip ## And an ordered list 1. Item one 2. Item two 3. Item three 4. Item four ## And a nested list * level 1 item * level 2 item * level 2 item * level 3 item * level 3 item * level 1 item * level 2 item * level 2 item * level 2 item * level 1 item * level 2 item * level 2 item * level 1 item ## Small image ![Octocat](https://github.githubassets.com/images/icons/emoji/octocat.png) ## Large image ![Branching](https://guides.github.com/activities/hello-world/branching.png) ## Definition lists can be used with HTML syntax Name Godzilla Born 1952 Birthplace Japan Color Green ```plain Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. ``` ```plain The final element. ``` ## Emoji support :+1: :heavy_check_mark: :fire: 💡 :unicorn: ## Material design icons {% icon check %} {% icon line_weight %} {% icon gavel %} {% icon visibility %} {% icon work %} {% icon alarm_on outlined %} ## PlantUML ```plantuml @startuml actor client node app database db db -> app app -> client @enduml ``` More complex example: ```plantuml @startuml actor Payer participant Merchant participant SwedbankPay participant 3rdParty box note left of Payer: Checkin Payer --> Merchant: Start Checkin Merchant --> SwedbankPay: POST /psp/consumers deactivate Merchant SwedbankPay --> Merchant: rel:view-consumer-identification ① deactivate SwedbankPay Merchant --> Payer: Show Checkin on Merchant Page Payer -> Payer: Initiate Consumer Hosted View (open iframe) ② Payer -> SwedbankPay: Show Consumer UI page in iframe ③ deactivate Payer SwedbankPay -> Payer: Consumer identification process activate Payer Payer -> SwedbankPay: Consumer identification process deactivate Payer SwedbankPay --> Payer: show consumer completed iframe activate Payer Payer ->> Payer: EVENT: onConsumerIdentified (consumerProfileRef) ④ deactivate Payer end box box note left of Payer: Payment Menu Payer -> Merchant: Initiate Purchase deactivate Payer Merchant -> SwedbankPay: POST /psp/paymentorders (paymentUrl, consumerProfileRef) deactivate Merchant SwedbankPay --> Merchant: rel:view-paymentorder deactivate SwedbankPay Merchant --> Payer: Display Payment Menu on Merchant Page activate Payer Payer ->> Payer: Initiate Payment Menu Hosted View (open iframe) Payer --> SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay -> Payer: Do payment logic deactivate SwedbankPay Payer ->> SwedbankPay: Do payment logic deactivate Payer opt Consumer perform payment out of iFrame Payer ->> Payer: Redirect to 3rd party Payer -> 3rdParty: Redirect to 3rdPartyUrl URL deactivate Payer 3rdParty --> Payer: Redirect back to paymentUrl (merchant) deactivate 3rdParty Payer ->> Payer: Initiate Payment Menu Hosted View (open iframe) Payer -> SwedbankPay: Show Payment UI page in iframe deactivate Payer end SwedbankPay -->> Payer: Payment status alt If payment is completed activate Payer Payer ->> Payer: Event: onPaymentCompleted Payer -> Merchant: Check payment status deactivate Payer Merchant -> SwedbankPay: GET deactivate Merchant SwedbankPay -> Merchant: rel: paid-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if paid-paymentorder operation exist) activate Payer deactivate Payer Merchant -> SwedbankPay: GET rel: paid-paymentorder deactivate Merchant SwedbankPay -->> Merchant: Payment Details deactivate SwedbankPay end end box opt If payment is failed activate Payer Payer ->> Payer: Event: OnPaymentFailed Payer -> Merchant: Check payment status deactivate Payer Merchant -> SwedbankPay: GET {paymentorder.id} deactivate Merchant SwedbankPay --> Merchant: rel: failed-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if failed-paymentorder operation exist) activate Payer deactivate Payer Merchant -> SwedbankPay: GET rel: failed-paymentorder deactivate Merchant SwedbankPay -->> Merchant: Payment Details deactivate SwedbankPay end end activate Merchant Merchant --> Payer: Show Purchase complete opt PaymentOrder Callback (if callbackUrls is set) activate Payer deactivate Payer SwedbankPay ->> Merchant: POST Payment Callback end box activate Merchant note left of Payer: Capture Merchant -> SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay --> Merchant: Capture status note right of Merchant: Capture here only if the purchasedgoods don't require shipping.If shipping is required, perform captureafter the goods have shipped.Should only be used for PaymentInstruments that support Authorizations. end box @enduml ``` [internal-absolute-full-link]: {{ site.url }} [explicit-relative-link]: ./page1 [implicit-relative-link]: page1 [internal-absolute-link]: /page1",
    "tags": "",
    "url": "/"
  },{
    "title": "Invoicing",
    "text": "## Invoices It's a weird thing this invoice, some like it, most dont. I have no particularly strong feeling seeing that I am just text on a page.",
    "tags": "",
    "url": "/payments/invoice.html"
  },{
    "title": "Page 1",
    "text": "{% assign card_col_class=\"col-xxl-3 col-xl-6 col-lg-6\" %} {% contentfor start %} {% include card.html title='Checkout' title_type=\"h2\" text='With our Checkout you get the pre-built all-in-one payment solution, complete with a checkin interface and payment menu.' icon_content='shopping_cart' icon_outlined=true to='/checkout' %} {% include card.html title='Payments instruments' title_type=\"h2\" text='Payments gives you a one-by-one integration with more customization for each payment method to build your own payment menu.' icon_content='credit_card' to='/payments' %} {% endcontentfor %} {% contentfor sdks %} Loooooking for SDKs? {% include card.html title='Android SDK' text='Learn more about how to integrate our Android SDK' icon_content='img/sdks/logo-android.svg' icon_svg=true type='sdk' to='' %} {% include card.html title='Swift SDK' text='Learn more about how to integrate our Swift SDK' icon_content='img/sdks/logo-swift.svg' icon_svg=true type='sdk' to='' %} {% include card.html title='.NET SDK' text='Learn more about how to integrate our .NET SDK' icon_content='img/sdks/logo-net.svg' icon_svg=true type='sdk' to='' %} {% include card.html title='PHP SDK' text='Learn more about how to integrate our PHP SDK' icon_content='img/sdks/logo-php.svg' icon_svg=true type='sdk' to='' %} {% endcontentfor %} {% contentfor modules %} Or perhaps modules? {% include card.html title='Episerver' text='See how you can integrate the Episerver module' icon_content='img/modules/logo-episerver.svg' icon_svg=true type='module' to='' %} {% include card.html title='Magento 2' text='See how you can integrate the Magento 2 module' icon_content='img/modules/logo-magento2.svg' icon_svg=true type='module' to='' %} {% include card.html title='WooCommerce' text='See how you can integrate the WooCommerce module' icon_content='img/modules/logo-woocommerce.svg' icon_svg=true type='module' to='' %} {% endcontentfor %} {% contentfor release_notes %} What's new in the documentation {% include release_notes.html num_dates=3 %} See full release notes {% endcontentfor %} {% contentfor extras %} Extra resources {% include card.html title='OS development guidelines' text='This is how we create an inclusive environment' icon_content='account_circle' icon_outlined=true to='' %} {% include card.html title='Test data' text='Get the required data for testing in our interfaces' icon_content='content_paste' to='' %} {% include card.html title='Terminology' text='Get a better understanding of the terms we use' icon_content='menu_book' to='' %} {% include card.html title='See all resources (7)' text='Data protection, public migration key etc' no_icon=true to='' %} {% endcontentfor %}",
    "tags": "",
    "url": "/page1.html"
  },{
    "title": "Page 2",
    "text": "",
    "tags": "",
    "url": "/page2.html"
  },{
    "title": "Swedbank Pay Checkout – Payment Menu",
    "text": "{% include jumbotron.html body=\"**Payment Menu** begins where **Checkin** left off, letting the payer complete their purchase.\" %} ## Step 3: Create Payment Order Once consumer has been identified, the next step is to initiate the payment using `consumerProfileRef` retrieved in the previous step. We start by performing a `POST` request towards the `paymentorder` resource with the payer information (such as `consumerProfileRef`) we obtained in the checkin process described above. Remember to read up on our. ### Response The response back should look something like this (abbreviated for brevity): {:.code-view-header} **Response** ```http HTTP/1.1 201 Created Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}\" }, \"operations\": [ { \"href\": \"{{ page.front_end_url }}/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token={{ page.payment_token }}&culture=sv-SE\", \"rel\": \"view-paymentorder\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } ``` {:.table .table-striped} | Field | Type | Description | | :------------- | :------- | :--------------------------------------------------------------------------------- | | `paymentorder` | `object` | The payment order object. | | └➔&nbsp;`id` | `string` | | | `operations` | `array` | The array of possible operations to perform, given the state of the payment order. | The `paymentorder` object is abbreviated since it's just the `id` and `operations` we are interested in. Store the `id` of the Payment Order in your system to look up status on the completed payment later. Then find the `view-paymentorder` operation and embed its `href` in a `` element. That script will then load the Seamless View for the Payment Menu. We will look into how to hook that up next. {% include alert.html type=\"informative\" icon=\"info\" body=\" `orderReference` must be sent as a part of the `POST` request to `paymentorders` and must represent the order ID of the webshop or merchant website.\" %} ## Step 4: Display the Payment Menu To load the payment menu from the JavaScript URL obtained in the back end API response, it needs to be set as a `script` element's `src` attribute. You can cause a page reload and do this with static HTML or you can avoid the page refresh by invoking the POST to create the payment order through Ajax and then create the script element with JavaScript, all inside the event handler for [`onConsumerIdentified`][technical-reference-onconsumer-identified]. The HTML code will be unchanged in this example. {:.code-view-header} **JavaScript** ```js var request = new XMLHttpRequest(); request.addEventListener('load', function () { // We will assume that our own backend returns the // exact same as what SwedbankPay returns. response = JSON.parse(this.responseText); var script = document.createElement('script'); // This assumes the operations from the response of the POST of the // payment order is returned verbatim from the server to the Ajax: var operation = response.operations.find(function (o) { return o.rel === 'view-consumer-identification'; }); script.setAttribute('src', operation.href); script.onload = function () { payex.hostedView.consumer({ // The container specifies which id the script will look for // to host the checkin component container: 'checkin', onConsumerIdentified: function onConsumerIdentified(consumerIdentifiedEvent) { // When the consumer is identified, we need to perform an AJAX request // to our server to forward the consumerProfileRef in a server-to-server // POST request to the Payment Orders resource in order to initialize // the Payment Menu. var request = new XMLHttpRequest(); request.addEventListener('load', function () { response = JSON.parse(this.responseText); // This is identical to how we get the 'view-consumer-identification' // script from the check-in. var script = document.createElement('script'); var operation = response.operations.find(function (o) { return o.rel === 'view-paymentorder'; }); script.setAttribute('src', operation.href); script.onload = function () { // When the 'view-paymentorder' script is loaded, we can initialize the // Payment Menu inside our 'payment-menu' container. payex.hostedView.paymentMenu({ container: 'payment-menu', culture: 'sv-SE' }).open(); }; // Append the Payment Menu script to the var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Like before, you should replace the address here with // your own endpoint. request.open('POST', '', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // In this example, we send the entire Consumer Identified Event Argument // Object as JSON to the server, as it contains the consumerProfileRef. request.send(JSON.stringify(consumerIdentifiedEvent)); }, onShippingDetailsAvailable: function onShippingDetailsAvailable(shippingDetailsAvailableEvent) { console.log(shippingDetailsAvailableEvent); } }).open(); }; // Appending the script to the head var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Place in your own API endpoint here. request.open('POST', '', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // We send in the previously mentioned request here to the checkin endpoint. request.send(JSON.stringify({ operation: 'initiate-consumer-session', language: 'sv-SE', shippingAddressRestrictedToCountryCodes : ['NO', 'SE'] })); ``` This should bring up the Payment Menu in a Seamless View. It should look like this, depending on whether the payer is logged in (top) or a guest user (bottom): When the consumer completes the payment, the Payment Menu script will be signaled and a full redirect to the `completeUrl` sent in with the Payment Order will be performed. When the `completeUrl` on your server is hit, you can inspect the status on the stored `paymentorder.id` on the server, and then perform `capture`. If the payment is a `Sale` or one-phase purchase, it will be automatically captured. A third scenario is if the goods are sent physically to the payer; then you should await capture until after the goods have been sent. You may open and close the payment menu using `.open()` and `.close()` functions. You can also invoke `.refresh()` to [update the Payment Menu][payment-order-operations] after any changes to the order. Below, you will see a complete overview of the payment menu process. Notice that there are two ways of performing the payment: * Consumer perform payment **out** of `iframe`. * Consumer perform payment **within** `iframe`. ```mermaid sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(138, 205, 195, 0.1) activate Payer note left of Payer: Payment Menu Payer ->>+ Merchant: Initiate Purchase deactivate Payer Merchant ->>+ SwedbankPay: POST /psp/paymentorders (paymentUrl, payer) deactivate Merchant SwedbankPay -->>+ Merchant: rel:view-paymentorder deactivate SwedbankPay Merchant -->>- Payer: Display Payment Menu on Merchant Page activate Payer Payer ->> Payer: Initiate Payment Menu Hosted View (open iframe) Payer -->>+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay ->>+ Payer: Do payment logic deactivate SwedbankPay opt Consumer perform payment out of iFrame Payer ->> Payer: Redirect to 3rd party Payer ->>+ 3rdParty: Redirect to 3rdPartyUrl URL deactivate Payer 3rdParty -->>+ Payer: Redirect back to paymentUrl (merchant) deactivate 3rdParty Payer ->> Payer: Initiate Payment Menu Hosted View (open iframe) Payer ->>+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay ->> Payer: Do payment logic end SwedbankPay -->> Payer: Payment status deactivate SwedbankPay alt If payment is completed activate Payer Payer ->> Payer: Event: onPaymentCompleted Payer ->>+ Merchant: Check payment status deactivate Payer Merchant ->>+ SwedbankPay: GET deactivate Merchant SwedbankPay ->>+ Merchant: rel: paid-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if paid-paymentorder operation exist) activate Payer deactivate Payer Merchant ->>+ SwedbankPay: GET rel: paid-paymentorder deactivate Merchant SwedbankPay -->> Merchant: Payment Details deactivate SwedbankPay end end opt If payment is failed activate Payer Payer ->> Payer: Event: OnPaymentFailed Payer ->>+ Merchant: Check payment status deactivate Payer Merchant ->>+ SwedbankPay: GET {paymentorder.id} deactivate Merchant SwedbankPay -->>+ Merchant: rel: failed-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if failed-paymentorder operation exist) activate Payer deactivate Payer Merchant ->>+ SwedbankPay: GET rel: failed-paymentorder deactivate Merchant SwedbankPay -->> Merchant: Payment Details deactivate SwedbankPay end end activate Merchant Merchant -->>- Payer: Show Purchase complete opt PaymentOrder Callback (if callbackUrls is set) activate Payer deactivate Payer SwedbankPay ->> Merchant: POST Payment Callback end end ``` Now that you have completed the Payment Menu integration, you can move on to finalizing the payment in the [After Payment section][after-payment]. {% include iterator.html prev_href=\"checkin\" prev_title=\"Back: Checkin\" next_href=\"capture\" next_title=\"Next: Capture\" %} [after-payment]: after-payment [checkin-image]: /assets/img/checkout/your-information.png [consumer-reference]: /checkout/other-features#payee-reference [guest-payment-menu-image]: /assets/img/checkout/guest-payment-menu-450x850.png [initiate-consumer-session]: /checkout/checkin#step-1-initiate-session-for-consumer-identification [login-payment-menu-image]: /assets/img/checkout/logged-in-payment-menu-450x900.png [msisdn]: https://en.wikipedia.org/wiki/MSISDN [operations]: /checkout/other-features#operations [order-items]: #order-items [payee-reference]: /checkout/other-features#payee-reference [payment-menu]: #payment-menu [payment-order-capture]: /checkout/after-payment#capture [payment-order-operations]: /checkout/after-payment#operations [payment-order]: #payment-orders [paymentorder-items]: #items [settlement-and-reconciliation]: /checkout/other-features#settlement-and-reconciliation [split-settlement]: /checkout/other-features#split-settlement [technical-reference-onconsumer-identified]: /checkout/checkin#step-2-display-swedbank-pay-checkin-module [urls]: /checkout/other-features#urls-resource [user-agent]: https://en.wikipedia.org/wiki/User_agent",
    "tags": "",
    "url": "/checkout/payment-menu.html"
  },{
    "title": "Payment Orders",
    "text": "## Payment Orders The `paymentorders` resource is used when initiating a payment process through Payment Menu and Swedbank Pay Checkout. The payment order is a container for the payment instrument object selected by the payer. This will generate a payment that is accessed through the sub-resources `payments` and `currentPayment`. {:.code-header} **Request** ```http GET /psp/paymentorders/{{ page.payment_order_id }}/ HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {:.code-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/settings\" }, \"payers\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/paymentorders/{{ page.payment_order_id }}\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/paymentmenu/{{ page.payment_token }}\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token={{ page.payment_token }}&culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] } ``` ## Payment Orders 2 The `paymentorders` resource is used when initiating a payment process through Payment Menu and Swedbank Pay Checkout. The payment order is a container for the payment instrument object selected by the payer. This will generate a payment that is accessed through the sub-resources `payments` and `currentPayment`. {:.code-header} **Request** ```http GET /psp/paymentorders/{{ page.payment_order_id }}/ HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {:.code-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/settings\" }, \"payers\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}/currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/paymentorders/{{ page.payment_order_id }}\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/paymentmenu/{{ page.payment_token }}\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token={{ page.payment_token }}&culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] } ```",
    "tags": "",
    "url": "/checkout/features/payment-orders.html"
  },{
    "title": "Recurring payments",
    "text": "## Recurring Payments If you want to enable subsequent recurring – server-to-server – payments, you need to create a **recurrence token**. This token will be utilized after the initial payment order. **Recurring payments must be activated on the contract with Swedbank Pay in order to work.** ### Recurrence Token * When initiating a `Purchase` payment order, you need to make sure that the field `generateRecurrenceToken` is set to `true`. This recurrence token will stored in the authorization transaction sub-resource on the underlying payment resource. * When initiating a `Verify` payment order, a recurrence token will be generated automatically. This recurrence token is stored in the verification sub-resource on the underlying payment resource. You can view the current payment resource, containg the recurrence token and other payment instrument properties, by expanding the sub-resource `currentpayment` when doing a `GET` request on the `paymentorders` resource. {:.code-view-header} **Request** ```http GET /psp/paymentorders/{{ page.payment_order_id }}?$expand=currentpayment HTTP/1.1 Host: {{ page.api_host }} ``` ### Creating Recurring Payments When you have a `recurrenceToken` token safely tucked away, you can use this token in a subsequent `Recur` payment order. This will be a server-to-server affair, as we have tied all necessary payment instrument details related to the recurrence token during the initial payment order. ## Recurring Payments 2 If you want to enable subsequent recurring – server-to-server – payments, you need to create a **recurrence token**. This token will be utilized after the initial payment order. **Recurring payments must be activated on the contract with Swedbank Pay in order to work.** ### Recurrence Token 2 * When initiating a `Purchase` payment order, you need to make sure that the field `generateRecurrenceToken` is set to `true`. This recurrence token will stored in the authorization transaction sub-resource on the underlying payment resource. * When initiating a `Verify` payment order, a recurrence token will be generated automatically. This recurrence token is stored in the verification sub-resource on the underlying payment resource. You can view the current payment resource, containg the recurrence token and other payment instrument properties, by expanding the sub-resource `currentpayment` when doing a `GET` request on the `paymentorders` resource. {:.code-view-header} **Request** ```http GET /psp/paymentorders/{{ page.payment_order_id }}?$expand=currentpayment HTTP/1.1 Host: {{ page.api_host }} ``` ### Creating Recurring Payments 2 When you have a `recurrenceToken` token safely tucked away, you can use this token in a subsequent `Recur` payment order. This will be a server-to-server affair, as we have tied all necessary payment instrument details related to the recurrence token during the initial payment order. ## Recurring Payments 3 If you want to enable subsequent recurring – server-to-server – payments, you need to create a **recurrence token**. This token will be utilized after the initial payment order. **Recurring payments must be activated on the contract with Swedbank Pay in order to work.** ### Recurrence Token 3 * When initiating a `Purchase` payment order, you need to make sure that the field `generateRecurrenceToken` is set to `true`. This recurrence token will stored in the authorization transaction sub-resource on the underlying payment resource. * When initiating a `Verify` payment order, a recurrence token will be generated automatically. This recurrence token is stored in the verification sub-resource on the underlying payment resource. You can view the current payment resource, containg the recurrence token and other payment instrument properties, by expanding the sub-resource `currentpayment` when doing a `GET` request on the `paymentorders` resource. {:.code-view-header} **Request** ```http GET /psp/paymentorders/{{ page.payment_order_id }}?$expand=currentpayment HTTP/1.1 Host: {{ page.api_host }} ``` ### Creating Recurring Payments 3 When you have a `recurrenceToken` token safely tucked away, you can use this token in a subsequent `Recur` payment order. This will be a server-to-server affair, as we have tied all necessary payment instrument details related to the recurrence token during the initial payment order.",
    "tags": "",
    "url": "/checkout/features/recurring-payments.html"
  },{
    "title": "Release Notes",
    "text": "{% include alert.html type=\"informative\" icon=\"info\" header=\"Version numbers\" body=\"The version numbers used in headers on this page refers to the version of this very documentation, not to a version of any APIs described by it.\" %} ## 28 May 2020 ### Version 1.11.0 * Added a new Trustly Payments section. * Added information about in the section. ## 23 May 2020 ### Version 1.10.1 * Updated Swish Redirect requests. * Added `orderReference` information in Payment Order Callback in. ## 10 May 2020 ### Version 1.10.0 * Added a new Gift Cards section with descriptions of our Gift Cards API. * Added a new section. ## 02 May 2020 ### Version 1.9.2 * Corrected table in ## 01 May 2020 ### Version 1.9.1 * Corrected sequence diagrams in Swish Payments and Vipps Payments. * The `description` field is now more thoroughly described for all requests it's present in. * The `language` field is now better described for all requests it's present in. * All broken links should now be unbroken.",
    "tags": "",
    "url": "/resources/release-notes.html"
  },{
    "title": "Search",
    "text": "",
    "tags": "",
    "url": "/search.html"
  },{
    "title": "Secrets in payments",
    "text": "## Don't render this Payments have plenty of secrets due to it being secure and mostly encrypted. Only the end user and their bank can really see much data if any. We in between mostly see tokens.",
    "tags": "",
    "url": "/payments/secrets/super-secret.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/resources/redirect-from"
  }]};
