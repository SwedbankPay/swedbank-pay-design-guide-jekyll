var tipuesearch = {"pages": [{
    "title": "After payment is completed",
    "text": "After paaaayment Payment is done? Great, here is what will happen now. First we’ll subtract the money from your account, then a wizard will attempt a grand spell to carry the money on the back of ants to transfer it to a safe place. A secret place. A place with a secret.",
    "tags": "",
    "url": "/checkout-more/after-payment.html"
  },{
    "title": "Swedbank Pay Checkout – After Payment",
    "text": "When the consumer has completed the entire Checkin and Payment Menu, you need to implement the relevant after-payment operations in your order system. Which these operations are and how they are executed is described below. Introduction Below is the final part of the sequence diagram illustrating how a capture operation is performed. sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;PaymentInstruments that support &lt;br&gt;Authorizations. end Operations Most payment instruments are two-phase payments – in which a successful payment order will result in an authorized transaction – that must be followed up by a capture or cancellation transaction in a later stage. One-phase payments like Swish are settled directly without the option to capture or cancel. For a full list of the available operations, see the techincal reference. Operation Description create-paymentorder-capture The second part of a two-phase transaction where the authorized amount is sent from the payer to the payee. It is possible to do a part-capture on a subset of the authorized amount. Several captures on the same payment are possible, up to the total authorization amount. create-paymentorder-cancel Used to cancel authorized and not yet captured transactions. If a cancellation is performed after doing a part-capture, it will only affect the not yet captured authorization amount. create-paymentorder-reversal Used to reverse a payment. It is only possible to reverse a payment that has been captured and not yet reversed. To identify the operations that are available we need to do a GET request against the URI of paymentorder.id: Request 1 2 GET /psp/paymentorders/ HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; The (abbreviated) response containing an updateorder, capture, cancellation, and reversal operation should look similar to the response below: Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 HTTP/1.1 200 OK Content-Type: application/json { \"paymentOrder\": { \"id\": \"/psp/paymentorders/\" }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"/psp/paymentorders/\", \"rel\": \"update-paymentorder-updateorder\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"/psp/paymentorders//captures\", \"rel\": \"create-paymentorder-capture\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"/psp/paymentorders//cancellations\", \"rel\": \"create-paymentorder-cancel\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"/psp/paymentorders//reversals\", \"rel\": \"create-paymentorder-reversal\", \"contentType\": \"application/json\" } ] } Field Type Description paymentorder object The payment order object. └➔ id string   operations array The array of possible operations to perform, given the state of the payment order. info Note that all of the operations Cancel, Capture and Reversal must be implemented. Back: Capture Next: Other Features",
    "tags": "",
    "url": "/checkout/after-payment.html"
  },{
    "title": "Swedbank Pay Checkout – Capture",
    "text": "Step 5: Capture the funds Capture can only be done on a payment with a successful authorized transaction, and if the authorization was not done on a one-phase payment instrument. Examples of one-phase payment instruments are [Swish][swish] and [Vipps][vipps], while payment instruments such as [Credit Card][card] are two-phase payments, requiring a Capture to be performed. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can later do more captures on the same payment up to the total authorization amount. This is done by requesting the order information from the server, to get the request link to perform the capture. With this, you can request the capture with the sum to capture, and get back the status. sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;PaymentInstruments that support &lt;br&gt;Authorizations. end To capture the authorized payment, we need to perform create-paymentorder-capture against the accompanying href returned in the operations list. See the abbreviated request and response below: Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 POST /psp/paymentorders//captures HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Et voilà! Checkout should now be complete, the payment should be secure and everyone should be happy. But, sometimes you also need to implement the cancellation and reversal operations described below. Back: Payment Menu Next: After Payment",
    "tags": "",
    "url": "/checkout/capture.html"
  },{
    "title": "Swedbank Pay Checkout – Checkin",
    "text": "Step 1: Initiate session for consumer identification The payer will be identified with the consumers resource and will be persisted to streamline future Payment Menu processes. Payer identification is done through the initiate-consumer-session operation. Optional integration The response from the POST of consumer information contains a few operations. The combination of rel, method and contentType should give you a clue how the operation should be performed. The view-consumer-identification operation and its application/javascript content type gives us a clue that the operation is meant to be embedded in a &lt;script&gt; element in an HTML document. Request 1 2 3 4 5 6 7 8 9 10 POST /psp/consumers HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"operation\": \"initiate-consumer-session\", \"language\": \"sv-SE\", \"shippingAddressRestrictedToCountryCodes\" : [\"NO\", \"SE\", \"DK\"] } Required Field Type Description check operation string initiate-consumer-session, the operation to perform. check language string Selected language to be used in Checkin. Supported values are check shippingAddressRestrictedToCountryCodes string List of supported shipping countries for merchant. Using ISO-3166 standard. When the request has been sent, a response containing an array of operations that can be acted upon will be returned: Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 HTTP/1.1 200 OK Content-Type: application/json { \"token\": \"7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871\", \"operations\": [ { \"method\": \"GET\", \"rel\": \"redirect-consumer-identification\", \"href\": \"/consumers/sessions/7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"rel\": \"view-consumer-identification\", \"href\": \"/consumers/core/scripts/client/px.consumer.client.js?token=\", \"contentType\": \"application/javascript\" } ] } Field Type Description token string A session token used to initiate Checkout UI. operations array The array of operation objects to choose from, described in detail in the table below. └➔ rel string The relational name of the operation, used as a programmatic identifier to find the correct operation given the current state of the application. └➔ method string The HTTP method to use when performing the operation. └➔ contentType string The HTTP content type of the target URI. Indicates what sort of resource is to be found at the URI, how it is expected to be used and behave. └➔ href string The target URI of the operation. Step 2: Display Swedbank Pay Checkin module The response from the POST of consumer information contains a few operations. The combination of rel, method and contentType should give you a clue how the operation should be performed. The view-consumer-identification operation and its application/javascript content type gives us a clue that the operation is meant to be embedded in a &lt;script&gt; element in an HTML document. warning In our example we will focus on using the view-consumer-identification solution. The redirect-consumer-identification method redirects the user to Swedbank’s own site to handle the checkin and is used in other implementations. redirect-consumer-identification should only be used in test enviroments. It is not suitable for the production environment as there is no simple way of retrieving the consumerProfileRef. HTML 1 2 3 4 5 6 7 8 9 10 11 12 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Checkout is Awesome!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"checkin\"&gt;&lt;/div&gt; &lt;div id=\"payment-menu\"&gt;&lt;/div&gt; &lt;!-- Here you can specify your own javascript file --&gt; &lt;script src=\"&lt;Your-JavaScript-File-Here&gt;\"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; info The Checkin and Payment Menu components (the two &lt;iframe&gt; elements) must be separate (one must not replace the other). In the HTML, you only need to add two &lt;div&gt; elements to place the check-in and payment menu inside of. The JavaScript will handle the rest when it comes to handling the check-in and payment menu. JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 var request = new XMLHttpRequest(); request.addEventListener('load', function () { // We will assume that our own backend returns the // exact same as what SwedbankPay returns. var response = JSON.parse(this.responseText); var script = document.createElement('script'); // This assumes that the operations from the response of the POST from the // payment order is returned verbatim from the server to the Ajax: var operation = response.operations.find(function (o) { return o.rel === 'view-consumer-identification'; }); script.setAttribute('src', operation.href); script.onload = function () { payex.hostedView.consumer({ // The container specifies which id the script will look for // to host the checkin component container: 'checkin', onConsumerIdentified: function onConsumerIdentified(consumerIdentifiedEvent) { // consumerIdentifiedEvent.consumerProfileRef contains the reference // to the identified consumer which we need to pass on to the // Payment Order to initialize a personalized Payment Menu. console.log(consumerIdentifiedEvent); }, onShippingDetailsAvailable: function onShippingDetailsAvailable(shippingDetailsAvailableEvent) { console.log(shippingDetailsAvailableEvent); } }).open(); }; // Appending the script to the head var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Place in your own API endpoint here. request.open('POST', '&lt;Your-Backend-Endpoint-Here&gt;', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // In this example we'll send in all of the information mentioned before, // in the request to the endpoint. request.send(JSON.stringify({ operation: 'initiate-consumer-session', language: 'sv-SE', shippingAddressRestrictedToCountryCodes: ['NO', 'SE'] })); info Note that we add the script at the end of the body. This ensures that every element (like the container &lt;div&gt; elements) has loaded in before we try to access them with our script. With the scripts loading in after the entire page is loaded, we can access the &lt;div&gt; container that the Checkin will be hosted in. After that has all loaded, you should see something like this: As you can see, the payer’s information is pre-filled as provided by the initial POST. With a consumerProfileRef safely tucked into our pocket, the Checkin is complete and we can move on to Payment Menu. A complete overview of how the process of identifying the payer through Checkin is illustrated in the sequence diagram below. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(238, 112, 35, 0.05) note left of Payer: Checkin Payer -&gt;&gt;+ Merchant: Start Checkin Merchant -&gt;&gt;+ SwedbankPay: POST /psp/consumers deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel:view-consumer-identification ① deactivate SwedbankPay Merchant --&gt;&gt;- Payer: Show Checkin on Merchant Page Payer -&gt;&gt;+ Payer: Initiate Consumer Hosted View (open iframe) ② Payer -&gt;&gt;+ SwedbankPay: Show Consumer UI page in iframe ③ deactivate Payer SwedbankPay -&gt;&gt;- Payer: Consumer identification process activate Payer Payer -&gt;&gt;+ SwedbankPay: Consumer identification process deactivate Payer SwedbankPay --&gt;&gt;- Payer: show consumer completed iframe activate Payer Payer -&gt;&gt; Payer: EVENT: onConsumerIdentified (consumerProfileRef) ④ deactivate Payer end If a browser refresh is performed after the payer has checked in, the payment menu must be shown even though onConsumerIdentified is not invoked. Additional events during Checkin can also be implemented in the configuration object, such as onConsumerIdentified, onShippingDetailsAvailableand onBillingDetailsAvailable. Read more about these in the Checkin events section. Note on consumer data During this stage some consumer data is stored. Read more about our Data Protection Policy for details on which information we store and its duration. Back: Introduction Next: Payment Menu",
    "tags": "",
    "url": "/checkout/checkin.html"
  },{
    "title": "Creditting?",
    "text": "Don’t read this If you see this. It means you are credited.",
    "tags": "",
    "url": "/payments/credit.html"
  },{
    "title": "Checkout More",
    "text": "You’d like to checko out Great! Just check in first and we’ll get you sorted.",
    "tags": "",
    "url": "/checkout-more/"
  },{
    "title": "Secret payments",
    "text": "How we do secret payments We don’t.",
    "tags": "",
    "url": "/payments/secrets/"
  },{
    "title": "Payments",
    "text": "Woah bby Here we list a few details about payment",
    "tags": "",
    "url": "/payments/"
  },{
    "title": "Checkout – Features",
    "text": "All features view_list Payment orders When initiating a payment process arrow_forward autorenew Recurring Payments Initialize payment process containing the order arrow_forward description Description Initialize payment process containing the order arrow_forward settings Operations Initialize payment process containing the order arrow_forward http CompleteURL Initialize payment process containing the order arrow_forward shopping_basket Purchase Payments Initialize payment process containing the order arrow_forward attach_money Prices Initialize payment process containing the order arrow_forward construction Checkin Events Initialize payment process containing the order arrow_forward undo Callback Initialize payment process containing the order arrow_forward",
    "tags": "",
    "url": "/checkout/features/"
  },{
    "title": "Checkout – Introduction",
    "text": "Core implementation overview 01 Initiate session for consumer identification 15 min read arrow_forward 02 Display Swedbank Pay checkin module 10 min read arrow_forward 03 Create payment order 18 min read arrow_forward 04 Display the Payment Menu 13 min read arrow_forward 05 Capture the funds 10 min read arrow_forward Additional features add After Payment Add After-payment operation to your order system arrow_forward remove_red_eye Features In this section you find various resources for Swedbank Pay’s API Platform. arrow_forward",
    "tags": "",
    "url": "/checkout/"
  },{
    "title": "Gift Cards – Introduction",
    "text": "Overview The Gift Cards API is a gateway for receiving gift card payments through our system. It’s ment to simplify external integration for prepaid gift cards. Prerequisites An agreement which includes Swedbank Pay Payments. Gift Card Credentials from Swedbank Pay retrieved from the Swedbank Pay Admin (VAS CAM). Implementation For implementation of the Gift Cards API, please read through the following documentation: Test Client Swagger Operations",
    "tags": "",
    "url": "/gift-cards/"
  },{
    "title": "Home",
    "text": "Text can be bold, italic, or strikethrough. External absolute full link External protocol relative link [Internal absolute full link][internal-absolute-full-link] [Internal explicit relative link][explicit-relative-link] [Internal implicit relative link][implicit-relative-link] [Internal absolute link][internal-absolute-link] There should be whitespace between paragraphs. There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. Header 2 This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. This is a blockquote following a header. When something is important enough, you do it even if the odds are not in your favor. Header 3 JavaScript code with syntax highlighting. 1 2 3 4 var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } HTTP request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 POST /psp/consumers HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"operation\": \"initiate-consumer-session\", \"msisdn\": \"+4798765432\", \"email\": \"olivia.nyhuus@example.com\", \"consumerCountryCode\": \"NO\", \"nationalIdentifier\": { \"socialSecurityNumber\": \"26026708248\", \"countryCode\": \"NO\" } } Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/\", \"authorization\": { \"direct\": true, \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"issuingBank\": \"Utl. Visa\", \"paymentToken\": \"\", \"maskedPan\": \"454778******3329\", \"expiryDate\": \"12/2020\", \"panToken\": \"cca2d98d-8bb3-4bd6-9cf3-365acbbaff96\", \"panEnrolled\": true, \"acquirerTransactionTime\": \"0001-01-01T00:00:00Z\", \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2020-03-10T13:15:01.9586254Z\", \"updated\": \"2020-03-10T13:15:02.0493818Z\", \"type\": \"Authorization\", \"state\": \"AwaitingActivity\", \"number\": 70100366758, \"amount\": 4201, \"vatAmount\": 0, \"description\": \"Test transaction\", \"payeeReference\": \"1583846100\", \"isOperational\": true, \"operations\": [ { \"method\": \"GET\", \"href\": \"https://api.stage.payex.com/psp/creditcard/confined/payments/authorizations/authenticate/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authentication\" } ] } } } JSON 1 2 3 4 5 6 7 8 9 10 { \"operation\": \"initiate-consumer-session\", \"msisdn\": \"+4798765432\", \"email\": \"olivia.nyhuus@example.com\", \"consumerCountryCode\": \"NO\", \"nationalIdentifier\": { \"socialSecurityNumber\": \"26026708248\", \"countryCode\": \"NO\" } } Here’s some &lt;inline&gt; { \"code\": true } that should .be { highlighted: according; } to their language. Header 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 Here’s a nice, striped table. head1 head two three ok good swedish fish nice out of stock good and plenty nice ok good oreos hmm ok good zoute drop yumm Mermaid sequenceDiagram participant Merchant participant SwedbankPay activate SwedbankPay SwedbankPay-&gt;&gt;Merchant: POST &lt;callbackUrl&gt; activate Merchant note right of SwedbankPay: Callback POST by SwedbankPay Merchant-&gt;&gt;SwedbankPay: Callback response deactivate Merchant deactivate SwedbankPay activate Merchant Merchant-&gt;&gt;SwedbankPay: GET &lt;payment instrument&gt; payment note left of Merchant: First API request activate SwedbankPay SwedbankPay--&gt;&gt;Merchant: payment resource deactivate SwedbankPay deactivate Merchant Alerts This is a standard alert. check_circle This is a successful alert. info_outline Informational alert This is an informational alert with &lt;markdown/&gt;. warning { \"warning\": \"alert\" } This is a warning alert with &lt;markdown/&gt;. Cards credit_card Default This is a default card arrow_forward settings SDK This is a .dx-card-sdk card arrow_forward build module This is a .dx-card-module card. This also has outlined icon arrow_forward 01 Horizontal This is a dx-card-horizontal card. Icons used with this card are just numbers arrow_forward Jumbotron PayEx Checkout is a complete reimagination of the checkout experience, integrating seamlessly into the merchant website through highly customizable and flexible components. Visit our demoshop and try out PayEx Checkout for yourself! Iterator Next Previous Go back Go forward There’s a horizontal rule below this Here is an unordered list Item foo Item bar Item baz Item zip And an ordered list Item one Item two Item three Item four And a nested list level 1 item level 2 item level 2 item level 3 item level 3 item level 1 item level 2 item level 2 item level 2 item level 1 item level 2 item level 2 item level 1 item Small image Large image Definition lists can be used with HTML syntax Name Godzilla Born 1952 Birthplace Japan Color Green Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. The final element. Emoji support :+1: :heavy_check_mark: :fire: 💡 :unicorn: Material design icons check line_weight gavel visibility work alarm_on PlantUML clientappdb More complex example: PayerPayerMerchantMerchantSwedbankPaySwedbankPay3rdParty3rdPartyCheckinStart CheckinPOST /psp/consumersrel:view-consumer-identification ①Show Checkin on Merchant PageInitiate Consumer Hosted View (open iframe) ②Show Consumer UI page in iframe ③Consumer identification processConsumer identification processshow consumer completed iframeEVENT: onConsumerIdentified (consumerProfileRef) ④Payment MenuInitiate PurchasePOST /psp/paymentorders (paymentUrl, consumerProfileRef)rel:view-paymentorderDisplay Payment Menu on Merchant PageInitiate Payment Menu Hosted View (open iframe)Show Payment UI page in iframeDo payment logicDo payment logicopt[Consumer perform payment out of iFrame]Redirect to 3rd partyRedirect to 3rdPartyUrl URLRedirect back to paymentUrl (merchant)Initiate Payment Menu Hosted View (open iframe)Show Payment UI page in iframePayment statusEvent: onPaymentCompletedCheck payment statusGET &lt;paymentorder.id&gt;rel: paid-paymentorderopt[Get PaymentOrder Details (if paid-paymentorder operation exist)]GET rel: paid-paymentorderPayment Detailsopt[If payment is failed]Event: OnPaymentFailedCheck payment statusGET {paymentorder.id}rel: failed-paymentorderopt[Get PaymentOrder Details (if failed-paymentorder operation exist)]GET rel: failed-paymentorderPayment DetailsShow Purchase completeopt[PaymentOrder Callback (if callbackUrls is set)]POST Payment CallbackCapturerel:create-paymentorder-captureCapture statusCapture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;PaymentInstruments that support &lt;br&gt;Authorizations. [internal-absolute-full-link]: [explicit-relative-link]: ./page1 [implicit-relative-link]: page1 [internal-absolute-link]: /page1",
    "tags": "",
    "url": "/"
  },{
    "title": "Invoicing",
    "text": "Invoices It’s a weird thing this invoice, some like it, most dont. I have no particularly strong feeling seeing that I am just text on a page.",
    "tags": "",
    "url": "/payments/invoice.html"
  },{
    "title": "Gift Cards – Operations",
    "text": "Gift card resource For security and headers see Security. Get New Gift Card Request 1 2 3 4 5 6 7 8 9 10 11 POST /api/payments/gift-card/get-new-gift-card HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"amount\": 10000, \"email\": \"example@exampleprovider.com\", \"msisdn\": 99999999, \"productId\": 7854 } Required Field Type Description check amount integer Total amount of Payment (in cents), ie. 100Kr -&gt; 10000. If amount is 0 no deposit is made.   email string customers email.   msisdn string customers mobile number.   productId string A human readable and descriptive text of the error. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 HTTP/1.1 200 OK Content-Type: application/json { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"accountSummaryGiftCard\": { \"accountKey\": 7013360000000001000, \"balance\": 10000, \"cvc\": 123, \"expiryDate\": \"2020-01-15\" }, \"paymentId\": 4526987 } Pre Deposit Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 POST /api/payments/gift-card/pre-deposit HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"amount\": 10000, \"currency\": \"NOK\", \"description\": \"string\", \"orderRef\": \"UUID\", \"simpleAccountIdentifier\": { \"accountKey\": 7013360000000001000, \"cvc\": 123, \"expiryDate\": \"12/20\" }, \"transactionRef\": \"UUID\" } Required Field Type Description check amount integer Total amount of Payment (in cents), ie. 100Kr -&gt; 10000. If amount is 0 no deposit is made. check currency string Currency for Payment.   description string Payment description. check orderRef string Merchant ref, Unique from merchant per session.   transactionRef string Unique ID for each transaction. check SimpleAccountIdentifier Object   check accountKey string Primary Account Number (PAN) for card/account. This is mandatory if ‘track2’ is not present.   cvc string Card Verification Code.   expiryDate string Expiry date on card (only applicable for PaymentInstrumentType ‘creditcard’) where expiry date is printed on card. Format MM/YY. Response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"balance\": 10000, \"paymentId\": 4526987 }",
    "tags": "",
    "url": "/gift-cards/operations.html"
  },{
    "title": "Gift Cards – Other Features",
    "text": "Purchase Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 POST /api/payments/payment-account/{paymentAccountId}/payment/purchase HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"additionalData\": \"string\", \"amount\": 10000, \"currency\": \"NOK\", \"description\": \"string\", \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"paymentOrderRef\": \"UUID\", \"paymentTransactionRef\": \"UUID\", \"products\": [ { \"amount\": 1337, \"description\": \"1x banana\", \"productId\": \"001\", \"quantity\": 13.37, \"unitOfMeasure\": \"L\", \"vatAmount\": 337, \"vatRate\": 25 } ], \"repeat\": true, \"stan\": 123456 } Required Field Type Description check accountIdentifier Object     accountId string Swedbank Pay internal id for card/account. check accountKey string Primary Account Number (PAN) for card/account. This is mandatory if ‘track2’ is not present.   cvc string Card Verification Code.   encryptedPin string If ‘000’ is set on authorization request, encrypted PIN block will be returned here.   expiryDate string Expiry date on card (only applicable for PaymentInstrumentType ‘creditcard’) where expiry date is printed on card. Format MM/YY   securityCode string Card Security Code.   track2 string Track 2 excluding start and end sentinel.   additionalData string Optional additional data stored on transaction. check amount integer Total amount of Payment (in cents), ie. 100Kr -&gt; 10000. check currency string Currency for Payment.   description string Payment description. check merchant object   check merchantName string Name of merchant where payment was performed   terminalId string Used to identify terminal. check paymentOrderRef string Unique ID to bind 2-phase transactions. check paymentTransactionRef string Unique ID for each payment.   products list   check amount integer Monetary value of purchased product (in cents).   description string Optional product description. check productId string Used to identify a product. check quantity number Number of product units sold (both integer and decimal numbers supported). check unitOfMeasure string Type of measurement, L=Litre, U=Unit, G=Grams This may refer to the number of packs, number of bottles etc., O=present, this denotes that there is no measurement. Enum:[ L, U, G, O ].   vatAmount integer Monetary value of vat-amount for purchased product (in cents).   vatRate number Vat-rate for purchased product (both integer and decimal numbers supported).   repeat boolean Notifies this is a repeat message.   stan string Systems trace audit number. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"allowedProductIds\": [ \"string\" ], \"amount\": 0, \"created\": \"2020-05-11T08:20:13.829Z\", \"currency\": \"string\", \"description\": \"string\", \"issuer\": { \"acquirerId\": \"string\", \"acquirerName\": \"string\", \"issuerId\": \"string\", \"issuerName\": \"string\", \"settlementProvided\": true }, \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"operation\": \"string\", \"paymentId\": \"string\", \"paymentOrderRef\": \"string\", \"paymentTransactionRef\": \"string\", \"remainingCancelAmount\": 0, \"remainingCaptureAmount\": 0, \"remainingReversalAmount\": 0, \"state\": \"OK\", \"transmissionTime\": \"2020-05-11T08:20:13.829Z\", \"updated\": \"2020-05-11T08:20:13.829Z\" } Field Type Description state enum OK, FAILED, REVERSED or DUPLICATE. The state of the transaction. Deposit Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 POST /api/payments/payment-account/{paymentAccountId}/payment/deposit HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"additionalData\": \"string\", \"amount\": 10000, \"currency\": \"NOK\", \"description\": \"string\", \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"paymentOrderRef\": \"UUID\", \"paymentTransactionRef\": \"UUID\", \"repeat\": true, \"stan\": 123456 } Required Field Type Description check accountIdentifier Object     accountId string Swedbank Pay internal id for card/account. check accountKey string Primary Account Number (PAN) for card/account. This is mandatory if ‘track2’ is not present.   cvc string Card Verification Code.   encryptedPin string If ‘000’ is set on authorization request, encrypted PIN block will be returned here.   expiryDate string Expiry date on card (only applicable for PaymentInstrumentType ‘creditcard’) where expiry date is printed on card. Format MM/YY   securityCode string Card Security Code.   track2 string Track 2 excluding start and end sentinel.   additionalData string Optional additional data stored on transaction. check amount integer Total amount of Payment (in cents), ie. 100Kr -&gt; 10000. check currency string Currency for Payment.   description string Payment description. check merchant object   check merchantName string Name of merchant where payment was performed   terminalId string Used to identify terminal. check paymentOrderRef string Unique ID to bind 2-phase transactions. check paymentTransactionRef string Unique ID for each payment.   repeat boolean Notifies this is a repeat message.   stan string Systems trace audit number. Response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"allowedProductIds\": [ \"string\" ], \"amount\": 0, \"created\": \"2020-05-11T09:58:33.431Z\", \"currency\": \"string\", \"description\": \"string\", \"issuer\": { \"acquirerId\": \"string\", \"acquirerName\": \"string\", \"issuerId\": \"string\", \"issuerName\": \"string\", \"settlementProvided\": true }, \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"operation\": \"string\", \"paymentId\": \"string\", \"paymentOrderRef\": \"string\", \"paymentTransactionRef\": \"string\", \"remainingCancelAmount\": 0, \"remainingCaptureAmount\": 0, \"remainingReversalAmount\": 0, \"state\": \"OK\", \"transmissionTime\": \"2020-05-11T09:58:33.431Z\", \"updated\": \"2020-05-11T09:58:33.431Z\" } Field Type Description state enum OK, FAILED, REVERSED or DUPLICATE. The state of the transaction. Balance Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 POST /api/payments/payment-account/balance HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" } } Required Field Type Description check accountIdentifier Object     accountId string Swedbank Pay internal id for card/account. check accountKey string Primary Account Number (PAN) for card/account. This is mandatory if ‘track2’ is not present.   cvc string Card Verification Code.   encryptedPin string If ‘000’ is set on authorization request, encrypted PIN block will be returned here.   expiryDate string Expiry date on card (only applicable for PaymentInstrumentType ‘creditcard’) where expiry date is printed on card. Format MM/YY   securityCode string Card Security Code.   track2 string Track 2 excluding start and end sentinel. Response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"paymentAccount\": { \"accountSummary\": { \"accountId\": 123456789, \"balance\": 10000, \"currency\": \"NOK\", \"expiryDate\": \"2020-01-15\", \"paymentInstrumentType\": \"giftcard\" }, \"issuerSummary\": { \"acquirerId\": \"string\", \"acquirerName\": \"string\", \"issuerId\": \"string\", \"issuerName\": \"string\", \"settlementProvided\": true } } } Authentication Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 POST /api/payments/payment-account/{paymentAccountId}/payment/authorize HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Hmac: HMAC authentication filter Content-Type: application/json { \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"additionalData\": \"string\", \"amount\": 10000, \"currency\": \"NOK\", \"description\": \"string\", \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"paymentOrderRef\": \"UUID\", \"paymentTransactionRef\": \"UUID\", \"repeat\": true, \"stan\": 123456 } Required Field Type Description check accountIdentifier Object     accountId string Swedbank Pay internal id for card/account. check accountKey string Primary Account Number (PAN) for card/account. This is mandatory if ‘track2’ is not present.   cvc string Card Verification Code.   encryptedPin string If ‘000’ is set on authorization request, encrypted PIN block will be returned here.   expiryDate string Expiry date on card (only applicable for PaymentInstrumentType ‘creditcard’) where expiry date is printed on card. Format MM/YY   securityCode string Card Security Code.   track2 string Track 2 excluding start and end sentinel.   additionalData string Optional additional data stored on transaction. check amount integer Total amount of Payment (in cents), ie. 100Kr -&gt; 10000. check currency string Currency for Payment.   description string Payment description. check merchant object   check merchantName string Name of merchant where payment was performed   terminalId string Used to identify terminal. check paymentOrderRef string Unique ID to bind 2-phase transactions. check paymentTransactionRef string Unique ID for each payment.   repeat boolean Notifies this is a repeat message.   stan string Systems trace audit number. Response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"accountIdentifier\": { \"accountId\": 123456789, \"accountKey\": 7013360000000001000, \"cvc\": 123, \"encryptedPin\": \"000\", \"expiryDate\": \"12/20\", \"securityCode\": 123, \"track2\": \"7013360000000000000=2012125123\" }, \"allowedProductIds\": [ \"string\" ], \"amount\": 0, \"created\": \"2020-05-12T07:02:36.719Z\", \"currency\": \"string\", \"description\": \"string\", \"issuer\": { \"acquirerId\": \"string\", \"acquirerName\": \"string\", \"issuerId\": \"string\", \"issuerName\": \"string\", \"settlementProvided\": true }, \"merchant\": { \"merchantName\": \"Test Merchant 101\", \"terminalId\": 12345 }, \"operation\": \"string\", \"paymentId\": \"string\", \"paymentOrderRef\": \"string\", \"paymentTransactionRef\": \"string\", \"remainingCancelAmount\": 0, \"remainingCaptureAmount\": 0, \"remainingReversalAmount\": 0, \"state\": \"OK\", \"transmissionTime\": \"2020-05-12T07:02:36.719Z\", \"updated\": \"2020-05-12T07:02:36.719Z\" } Field Type Description state enum OK, FAILED, REVERSED or DUPLICATE. The state of the transaction.",
    "tags": "",
    "url": "/gift-cards/other-features.html"
  },{
    "title": "Page 1",
    "text": "Welcome to the Swedbank Pay {developer portal} Our developer portal gives you the full tool box for integrating our payment instruments and getting started with easy, flexible and safe payments on your e-commerce website. Start your integration shopping_cart Checkout With our Checkout you get the pre-built all-in-one payment solution, complete with a checkin interface and payment menu. arrow_forward credit_card Payments Payments gives you a one-by-one integration with more customization for each payment method to build your own payment menu. arrow_forward card_giftcard Gift Cards Our Gift Cards API allows your customers to pay with prepaid gift cards issued by Swedbank Pay in your Checkout. arrow_forward Trusted by image/svg+xml Try our Demoshop. Unsure about how it all works? See how our checkout and payment methods are used in practice! Go to the demoshop arrow_forward Looking for SDKs? Android SDK Learn more about how to integrate our Android SDK arrow_forward Swift SDK Learn more about how to integrate our Swift SDK arrow_forward .NET SDK Learn more about how to integrate our .NET SDK arrow_forward PHP SDK Learn more about how to integrate our PHP SDK arrow_forward Or perhaps modules? Episerver See how you can integrate the Episerver module arrow_forward Magento 2 See how you can integrate the Magento 2 module arrow_forward WooCommerce See how you can integrate the WooCommerce module arrow_forward What's new in the documentation 28 May 2020 Version 1.11.0 Added a new Trustly Payments section. Added information about Storing URIs in the Technical Information section. 23 May 2020 Version 1.10.1 Updated Swish Redirect requests. Added orderReference information in Payment Order Callback in Checkout Other features. 10 May 2020 Version 1.10.0 Added a new Gift Cards section with descriptions of our Gift Cards API. Added a new section Co-badge Card Choice for Dankort in Card Payments. 02 May 2020 Version 1.9.2 Corrected table in payments page 01 May 2020 Version 1.9.1 Corrected sequence diagrams in Swish Payments and Vipps Payments. The description field is now more thoroughly described for all requests it’s present in. The language field is now better described for all requests it’s present in. All broken links should now be unbroken. See full release notes Extra resources account_circle OS development guidelines This is how we create an inclusive environment arrow_forward content_paste Test data Get the required data for testing in our interfaces arrow_forward menu_book Terminology Get a better understanding of the terms we use arrow_forward See all resources (7) Data protection, public migration key etc arrow_forward Can't find what you are looking for? We are always trying to make the developer portal as good as it can be please don’t hesitate to contact us. Contact us here",
    "tags": "",
    "url": "/page1.html"
  },{
    "title": "Page 2",
    "text": "",
    "tags": "",
    "url": "/page2.html"
  },{
    "title": "Test Client",
    "text": "Prerequisites Java 11 VueJS Maven Postgres Project setup 1 2 3 4 5 6 7 8 vas-payment-api-client ├─┬ backend → backend module with Spring Boot code │ ├── src │ └── pom.xml ├─┬ frontend → frontend module with Vue.js code │ ├── src │ └── pom.xml └── pom.xml → Maven parent pom managing both modules First App run informative PostgreSQL The application expects a PostgreSQL server to be running on localhost with a username test and password test to exist. The username and password for PostgreSQL can automatically be configured if PostgreSQL server is started in Docker with environment variables POSTGRES_USER=test and POSTGRES_PASSWORD=test are set (See docker-compose.yml). Clone the Payment Client repository from Github. Inside the root directory, do a: 1 mvn clean install Run the Spring Boot App: 1 mvn --projects backend spring-boot:run Now go to http://localhost:8080/ and have a look at your new client. Testing application Add a new Merchant with the details provided by Swedbank Pay. Click on Gift Cards and add a new Gift card. Build docker image 1 mvn --projects backend clean compile jib:dockerBuild Deploy to local docker 1 docker-compose up -d",
    "tags": "",
    "url": "/gift-cards/payment-client.html"
  },{
    "title": "Swedbank Pay Checkout – Payment Menu",
    "text": "Payment Menu begins where Checkin left off, letting the payer complete their purchase. Step 3: Create Payment Order Once consumer has been identified, the next step is to initiate the payment using consumerProfileRef retrieved in the previous step. We start by performing a POST request towards the paymentorder resource with the payer information (such as consumerProfileRef) we obtained in the checkin process described above. Remember to read up on our URL resource. Response The response back should look something like this (abbreviated for brevity): Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 HTTP/1.1 201 Created Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/\" }, \"operations\": [ { \"href\": \"/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=&amp;culture=sv-SE\", \"rel\": \"view-paymentorder\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } Field Type Description paymentorder object The payment order object. └➔ id string   operations array The array of possible operations to perform, given the state of the payment order. The paymentorder object is abbreviated since it’s just the id and operations we are interested in. Store the id of the Payment Order in your system to look up status on the completed payment later. Then find the view-paymentorder operation and embed its href in a &lt;script&gt; element. That script will then load the Seamless View for the Payment Menu. We will look into how to hook that up next. info orderReference must be sent as a part of the POST request to paymentorders and must represent the order ID of the webshop or merchant website. Step 4: Display the Payment Menu To load the payment menu from the JavaScript URL obtained in the back end API response, it needs to be set as a script element’s src attribute. You can cause a page reload and do this with static HTML or you can avoid the page refresh by invoking the POST to create the payment order through Ajax and then create the script element with JavaScript, all inside the event handler for onConsumerIdentified. The HTML code will be unchanged in this example. JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 var request = new XMLHttpRequest(); request.addEventListener('load', function () { // We will assume that our own backend returns the // exact same as what SwedbankPay returns. response = JSON.parse(this.responseText); var script = document.createElement('script'); // This assumes the operations from the response of the POST of the // payment order is returned verbatim from the server to the Ajax: var operation = response.operations.find(function (o) { return o.rel === 'view-consumer-identification'; }); script.setAttribute('src', operation.href); script.onload = function () { payex.hostedView.consumer({ // The container specifies which id the script will look for // to host the checkin component container: 'checkin', onConsumerIdentified: function onConsumerIdentified(consumerIdentifiedEvent) { // When the consumer is identified, we need to perform an AJAX request // to our server to forward the consumerProfileRef in a server-to-server // POST request to the Payment Orders resource in order to initialize // the Payment Menu. var request = new XMLHttpRequest(); request.addEventListener('load', function () { response = JSON.parse(this.responseText); // This is identical to how we get the 'view-consumer-identification' // script from the check-in. var script = document.createElement('script'); var operation = response.operations.find(function (o) { return o.rel === 'view-paymentorder'; }); script.setAttribute('src', operation.href); script.onload = function () { // When the 'view-paymentorder' script is loaded, we can initialize the // Payment Menu inside our 'payment-menu' container. payex.hostedView.paymentMenu({ container: 'payment-menu', culture: 'sv-SE' }).open(); }; // Append the Payment Menu script to the &lt;head&gt; var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Like before, you should replace the address here with // your own endpoint. request.open('POST', '&lt;Your-Backend-Endpoint-Here&gt;', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // In this example, we send the entire Consumer Identified Event Argument // Object as JSON to the server, as it contains the consumerProfileRef. request.send(JSON.stringify(consumerIdentifiedEvent)); }, onShippingDetailsAvailable: function onShippingDetailsAvailable(shippingDetailsAvailableEvent) { console.log(shippingDetailsAvailableEvent); } }).open(); }; // Appending the script to the head var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Place in your own API endpoint here. request.open('POST', '&lt;Your-Backend-Endpoint-Here&gt;', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // We send in the previously mentioned request here to the checkin endpoint. request.send(JSON.stringify({ operation: 'initiate-consumer-session', language: 'sv-SE', shippingAddressRestrictedToCountryCodes : ['NO', 'SE'] })); This should bring up the Payment Menu in a Seamless View. It should look like this, depending on whether the payer is logged in (top) or a guest user (bottom): When the consumer completes the payment, the Payment Menu script will be signaled and a full redirect to the completeUrl sent in with the Payment Order will be performed. When the completeUrl on your server is hit, you can inspect the status on the stored paymentorder.id on the server, and then perform capture. If the payment is a Sale or one-phase purchase, it will be automatically captured. A third scenario is if the goods are sent physically to the payer; then you should await capture until after the goods have been sent. You may open and close the payment menu using .open() and .close() functions. You can also invoke .refresh() to update the Payment Menu after any changes to the order. Below, you will see a complete overview of the payment menu process. Notice that there are two ways of performing the payment: Consumer perform payment out of iframe. Consumer perform payment within iframe. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(138, 205, 195, 0.1) activate Payer note left of Payer: Payment Menu Payer -&gt;&gt;+ Merchant: Initiate Purchase deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: POST /psp/paymentorders (paymentUrl, payer) deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel:view-paymentorder deactivate SwedbankPay Merchant --&gt;&gt;- Payer: Display Payment Menu on Merchant Page activate Payer Payer -&gt;&gt; Payer: Initiate Payment Menu Hosted View (open iframe) Payer --&gt;&gt;+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay -&gt;&gt;+ Payer: Do payment logic deactivate SwedbankPay opt Consumer perform payment out of iFrame Payer -&gt;&gt; Payer: Redirect to 3rd party Payer -&gt;&gt;+ 3rdParty: Redirect to 3rdPartyUrl URL deactivate Payer 3rdParty --&gt;&gt;+ Payer: Redirect back to paymentUrl (merchant) deactivate 3rdParty Payer -&gt;&gt; Payer: Initiate Payment Menu Hosted View (open iframe) Payer -&gt;&gt;+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay -&gt;&gt; Payer: Do payment logic end SwedbankPay --&gt;&gt; Payer: Payment status deactivate SwedbankPay alt If payment is completed activate Payer Payer -&gt;&gt; Payer: Event: onPaymentCompleted Payer -&gt;&gt;+ Merchant: Check payment status deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET &lt;paymentorder.id&gt; deactivate Merchant SwedbankPay -&gt;&gt;+ Merchant: rel: paid-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if paid-paymentorder operation exist) activate Payer deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET rel: paid-paymentorder deactivate Merchant SwedbankPay --&gt;&gt; Merchant: Payment Details deactivate SwedbankPay end end opt If payment is failed activate Payer Payer -&gt;&gt; Payer: Event: OnPaymentFailed Payer -&gt;&gt;+ Merchant: Check payment status deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET {paymentorder.id} deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel: failed-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if failed-paymentorder operation exist) activate Payer deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET rel: failed-paymentorder deactivate Merchant SwedbankPay --&gt;&gt; Merchant: Payment Details deactivate SwedbankPay end end activate Merchant Merchant --&gt;&gt;- Payer: Show Purchase complete opt PaymentOrder Callback (if callbackUrls is set) activate Payer deactivate Payer SwedbankPay -&gt;&gt; Merchant: POST Payment Callback end end Now that you have completed the Payment Menu integration, you can move on to finalizing the payment in the After Payment section. Back: Checkin Next: Capture",
    "tags": "",
    "url": "/checkout/payment-menu.html"
  },{
    "title": "Payment Orders",
    "text": "Payment Orders The paymentorders resource is used when initiating a payment process through [Payment Menu][payment-menu] and Swedbank Pay Checkout. The payment order is a container for the payment instrument object selected by the payer. This will generate a payment that is accessed through the sub-resources payments and currentPayment. Request 1 2 3 4 GET /psp/paymentorders// HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders//urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders//payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders//settings\" }, \"payers\": { \"id\": \"/psp/paymentorders//payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders//orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders//metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders//payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders//currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"/psp/paymentorders/\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] } Payment Orders 2 The paymentorders resource is used when initiating a payment process through [Payment Menu][payment-menu] and Swedbank Pay Checkout. The payment order is a container for the payment instrument object selected by the payer. This will generate a payment that is accessed through the sub-resources payments and currentPayment. Request 1 2 3 4 GET /psp/paymentorders// HTTP/1.1 Host: Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders//urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders//payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders//settings\" }, \"payers\": { \"id\": \"/psp/paymentorders//payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders//orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders//metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders//payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders//currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"/psp/paymentorders/\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] }",
    "tags": "",
    "url": "/checkout/features/payment-orders.html"
  },{
    "title": "Recurring payments",
    "text": "Recurring Payments If you want to enable subsequent recurring – server-to-server – payments, you need to create a recurrence token. This token will be utilized after the initial payment order. Recurring payments must be activated on the contract with Swedbank Pay in order to work. Recurrence Token When initiating a Purchase payment order, you need to make sure that the field generateRecurrenceToken is set to true. This recurrence token will stored in the [authorization transaction][transaction] sub-resource on the underlying payment resource. When initiating a Verify payment order, a recurrence token will be generated automatically. This recurrence token is stored in the [verification][verification-transaction] sub-resource on the underlying payment resource. You can view the current payment resource, containg the recurrence token and other payment instrument properties, by [expanding the sub-resource][expanding] [currentpayment][current-payment] when doing a GET request on the paymentorders resource. Request 1 2 GET /psp/paymentorders/?$expand=currentpayment HTTP/1.1 Host: Creating Recurring Payments When you have a recurrenceToken token safely tucked away, you can use this token in a subsequent Recur payment order. This will be a server-to-server affair, as we have tied all necessary payment instrument details related to the recurrence token during the initial payment order. Recurring Payments 2 If you want to enable subsequent recurring – server-to-server – payments, you need to create a recurrence token. This token will be utilized after the initial payment order. Recurring payments must be activated on the contract with Swedbank Pay in order to work. Recurrence Token 2 When initiating a Purchase payment order, you need to make sure that the field generateRecurrenceToken is set to true. This recurrence token will stored in the [authorization transaction][transaction] sub-resource on the underlying payment resource. When initiating a Verify payment order, a recurrence token will be generated automatically. This recurrence token is stored in the [verification][verification-transaction] sub-resource on the underlying payment resource. You can view the current payment resource, containg the recurrence token and other payment instrument properties, by [expanding the sub-resource][expanding] [currentpayment][current-payment] when doing a GET request on the paymentorders resource. Request 1 2 GET /psp/paymentorders/?$expand=currentpayment HTTP/1.1 Host: Creating Recurring Payments 2 When you have a recurrenceToken token safely tucked away, you can use this token in a subsequent Recur payment order. This will be a server-to-server affair, as we have tied all necessary payment instrument details related to the recurrence token during the initial payment order. Recurring Payments 3 If you want to enable subsequent recurring – server-to-server – payments, you need to create a recurrence token. This token will be utilized after the initial payment order. Recurring payments must be activated on the contract with Swedbank Pay in order to work. Recurrence Token 3 When initiating a Purchase payment order, you need to make sure that the field generateRecurrenceToken is set to true. This recurrence token will stored in the [authorization transaction][transaction] sub-resource on the underlying payment resource. When initiating a Verify payment order, a recurrence token will be generated automatically. This recurrence token is stored in the [verification][verification-transaction] sub-resource on the underlying payment resource. You can view the current payment resource, containg the recurrence token and other payment instrument properties, by [expanding the sub-resource][expanding] [currentpayment][current-payment] when doing a GET request on the paymentorders resource. Request 1 2 GET /psp/paymentorders/?$expand=currentpayment HTTP/1.1 Host: Creating Recurring Payments 3 When you have a recurrenceToken token safely tucked away, you can use this token in a subsequent Recur payment order. This will be a server-to-server affair, as we have tied all necessary payment instrument details related to the recurrence token during the initial payment order.",
    "tags": "",
    "url": "/checkout/features/recurring-payments.html"
  },{
    "title": "Release Notes",
    "text": "info Version numbers The version numbers used in headers on this page refers to the version of this very documentation, not to a version of any APIs described by it. 28 May 2020 Version 1.11.0 Added a new Trustly Payments section. Added information about Storing URIs in the Technical Information section. 23 May 2020 Version 1.10.1 Updated Swish Redirect requests. Added orderReference information in Payment Order Callback in Checkout Other features. 10 May 2020 Version 1.10.0 Added a new Gift Cards section with descriptions of our Gift Cards API. Added a new section Co-badge Card Choice for Dankort in Card Payments. 02 May 2020 Version 1.9.2 Corrected table in payments page 01 May 2020 Version 1.9.1 Corrected sequence diagrams in Swish Payments and Vipps Payments. The description field is now more thoroughly described for all requests it’s present in. The language field is now better described for all requests it’s present in. All broken links should now be unbroken. April 2020 Version 1.9.0 Added a new section SDKs and Modules in Resources. Corrected problem type URIs for Card Payments, Checkout and Swish Payments. Required checkmarks have a new, fresh look: check Flags now also sport a new look: Version 1.8.3 Bug fixes to Mermaid diagram and alert styling, plus improvements to code block styling after the update to Swedbank Pay Design Guide 4.5.0. Added examples with screenshots of the effects of Merchant Authenticated Consumer. Version 1.8.2 Added a more thorough description on paymentUrl and completeUrl in all relevant payments. Updated orderItems to be required in all requests and responses. Clean up of Swish Payments Removed pageStripDown in Vipps Redirect. Updated Card Payments Direct to have a correct integration flow. Updated the main page to be more welcoming. Updated information on Merchant Authenticated Consumer. March 2020 Version 1.8.1 Documented allowed characters in orderItem.class. Added receiptReference in Invoice Payments and Payment Order in capture and reversal. Callback is now moved to Other features in all payments intruments. Clean up of MobilePay. Corrected the address of Leia Ahlström in Test Data. Updated the documentation in Card Payments to recommend using shippingAddress. Updated payeeReference to have an unique description for Payment Order and every Payment Instrument. Version 1.8.0 Updated Invoice Payments Direct where approvedLegalAddress should now be use for all countries. Small text changes and clarifications. Restructured Invoice Payments and Card Payments. Version 1.7.7 This change contains build updates for the page. :octocat: Version 1.7.6 Several links has been corrected. The chance of 404 is now much lower. Other small text changes and clarifications. Version 1.7.5 New page! Technical reference into has been moved from the front page to technical information. Front page got a slimmer look. :swimmer: Abort reference is back in credit card reference. Swish error code reference got a face lift, check it out here :candy:. February 2020 Version 1.7.4 Described the M-Commerce flow for Swish Direct. Alphabetize the terms in Terminology. Version 1.7.3 Expanded information about the field restrictedToInstruments. Added information about the field receiptReference. Added information about direct integration in Credit card. Added and fixed several missing headings in template files. Expanded information about verify. Created new page for Checkout Capture. Mobile Pay Online was previously only refered to as Mobile Pay, this has been corrected. Version 1.7.2 Removed several duplicate headers in other-features pages. Added unscheduled purchase information in card payments. We have added card logos when selecting card in payment menu. See updated screenshot of payment menu. Version 1.7.1 All sections have been released. :trophy: Version 1.7 README is updated with info about includes. Added several includes. Updated payeeReference description in Checkout and Invoice section. Using snake case consistently. Added section for unscheduled purchase in Card section. Fixed JavaScript example in Checkin section. Added info about mobile verification in Swish Other Features. Added section about Authenticated Merchants in Checkout section. Cleanup in Vipps Other Features. paymentRestrictedToAgeLimit and paymentRestrictedToSocialSecurityNumber added to swish object in Swish Redirect. paymentAgeLimit , socialSecurityNumber added to the new payerInfo object in Swish Seamless View. Properties added in Swish. Added section about migration key in Resources section. January 2020 Version 1.6.3 restrictedToInstruments added back to Payment Order purchase requests. Direct Debit section and mentions in various includes removed. Various improvements and fixes. Version 1.6.2 The Payments and Card Payments sections are reviewed and released. Version 1.6.1 email, msisdn, workPhoneNumber and homePhoneNumber added to the payer object in Payment Order requests. cardholder added to Card Payments Purchase requests. Various improvements and fixes. Version 1.6 Credit Payments (née “Credit Account”) sections have been deleted from the Swedbank Pay Developer Portal. The Swish Payments and Vipps Payments have received a few updates and are now ready for another round of review. MobilePay Payments is now ready for review. paymentAgeLimit is now added in Swish Payments. The Terminology page is updated and 3-D Secure 2.0 (3DS2) , PSD2 and SCA explanations are added. Added descriptions for Payment States And Transaction States everywhere appropriate. Google Analytics has been added to Developer Portal. Version 1.5 The review of Invoice Payments is complete and as such the section is now released and ready for use. The Card Payments section has received an overhaul, inching it closer to release. The Swish Payments and Vipps Payments sections are ready for review. The Direct Debit, MobilePay Payments and Credit Payments (née “Credit Account”) sections have received a few updates, inching them all closer to review. Version 1.4 Updated Swish Redirect and Swish Direct sections in preparations for review and the transition from PayEx Developer Portal. Added Data Protection section. Payment Orders now support orderItems in all operations. Added Terminology page. Clarified what the awaitingActivity state means for different payment instruments. Removed erroneous noCVC in examples for One-Click Card Payments section. Added description for the onBillingDetailsAvailable event in the Checkin Front End section. December 2019 Update in checkin module We have added support for specifying language as input in checkin module, language. Supported languages are Norwegian, Swedish and English. Consumers outside Sweden and Norway can now purchase in our Checkout service. You can specify supported countries for shipment in a new input parameter, shippingAddressRestrictedToCountryCodes, in our checkin module. Updated API specification can be found here. The parameters language and shippingAddressRestrictedToCountryCodes have replaced the former consumerCountryCode. The parameters msisdn and email have been made obsolete due to GDPR rules. This information cannot be sent in without an explicit consent from the consumer. November 2019 Welcome, Swedbank Pay Developer Portal PayEx’ Commerce offerings are being rebranded to Swedbank Pay and as a result of that rebranding, PayEx Checkout is now known as Swedbank Pay Checkout and its documentation can be found on here. Support international phone numbers in Swish We have added support for sending in international phone numbers in the request. Check our Swish documentation here. This is supported in API, and when consumer enters their phone number on the payment page. Order Items The input parameter quantity in OrderItems-node is now updated to decimal. You may send up to 4 decimals. See updated documentation here October 2019 Payment Url Credit Card We have added the URL field called paymentUrl for Card Seamless View (previously added for Vipps and Checkout), that will be used when the user is returned from 3rd party. The URL should represent the page in where the payment Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the hosted payment view was added, in order to initiate the payment. Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment as the one that initiated the payment originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. When the JavaScript is invoked after return of the consumer, the consumer will either be redirected to the completeUrl (event onPaymentCompleted) or if payment has failed, see an error-message and get the option to retry the payment. August 2019 Order Items in payment orders On Payment Orders, itemDescriptions and vatSummary has been replaced with the more versatile and powerful orderItems. While itemDescriptions will continue to work, it is recommended that all integrations switch over to orderItems as soon as possible. When orderItems is used, itemDescriptions must be removed from all requests as the two cannot be used simultaneously. Payment Url For our Seamless Views (currently Vipps or in Checkout), we have added a new URL field called paymentUrl that will be used when user is returned from 3rd party. The URL should represent the page of where the payment hosted view was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the hosted payment view was added to in order to initiate the payment. Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment or Payment Order as the one that initiated the payment originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment or Payment Order stored. When the JavaScript is invoked after return of the consumer, the consumer will either be redirected to the completeUrl, or, if payment failed, see an error-message, and get the option to retry the payment. If paymentUrl is not implemented, retry of payments will not be possible in either individual payment instruments such as Vipps or in Checkout. It makes it more tedious to retry payment as the whole process including the creation of the payment or payment order needs to be performed again. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer.",
    "tags": "",
    "url": "/resources/release-notes.html"
  },{
    "title": "Search",
    "text": "Hidden true.",
    "tags": "",
    "url": "/search.html"
  },{
    "title": "Gift Cards – Security",
    "text": "OAuth2 The Gift Card API requires an OAuth2 access token for interaction. This application automatically handles token fetching and refreshing by using Spring Security. Configuration values are set in application.yml: 1 2 3 4 5 6 7 8 9 10 11 # \"XXX\" Should be replaced by value provided by Swebank Pay # CLIENT_ID/CLIENT_SECRET/VAS_AUTH_SERVER_URL can also be set in docker-compose.yml as environment variables if running with docker vas-payment-api: oauth2: client: grantType: client_credentials clientId: \"${CLIENT_ID}:XXX\" clientSecret: \"${CLIENT_SECRET}:XXX\" accessTokenUri: \"${VAS_AUTH_SERVER_URL}:XXX\" scope: publicapi And the implementation of these are located in Oauth2RestTemplateConfiguration.java: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class Oauth2RestTemplateConfiguration { //... @Bean @ConfigurationProperties(\"vas-payment-api.oauth2.client\") protected ClientCredentialsResourceDetails oAuthDetails() { return new ClientCredentialsResourceDetails(); } @Bean protected RestTemplate restTemplate() { var restTemplate = new OAuth2RestTemplate(oAuthDetails()); restTemplate.setInterceptors(ImmutableList.of(externalRequestInterceptor())); restTemplate.setRequestFactory(httpRequestFactory()); return restTemplate; } //... } HMAC A Hash-based Message Authentication Code (HMAC) is used to verify the data integrity and authenticity of the HTTP requests made towards our API. An HMAC header therefore needs to be present in every request. In this client the HMAC value is automatically calculated by HmacSignatureBuilder.java and added to all outgoing requests in ExternalRequestInterceptor.java HMAC is implemented using SHA-512 secure hash algorithm. Expected Hmac header format is: 1 HmacSHA512 &lt;user&gt;:&lt;nonce&gt;:&lt;digest&gt; where digest is a Base64 formatted HMAC SHA512 digest of the following string: 1 2 3 4 5 6 METHOD\\n RESOURCE\\n USER\\ NONCE\\n DATE\\n PAYLOAD\\n Required Field Description check METHOD The requested method (in upper case) check RESOURCE The path to desired resource (without hostname and any query parameters) check NONSE A unique value for each request (UUID   DATE Same as Transmission-Time if provided as seperate header. Uses ISO8601 standard   PAYLOAD The body of request Example request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 curl -X POST \\ https://stage-evc.payex.com/payment-api/api/payments/payment-account/balance \\ -H 'Accept: */*' \\ -H 'Agreement-Merchant-Id: XXX' \\ -H 'Authorization: Bearer XXX' \\ -H 'Hmac: HmacSHA512 user:21a0213e-30eb-85ab-b355-a310d31af30e:oY5Q5Rf1anCz7DRm3GyWR0dvJDnhl/psylfnNCn6FA0NOrQS3L0fvyUsQ1IQ9gQPeLUt9J3IM2zwoSfZpDgRJA==' \\ -H 'Transmission-Time: 2019-06-18T09:19:15.208257Z' \\ -H 'Session-Id: e0447bd2-ab64-b456-b17b-da274bb8428e' \\ -d '{ \"accountIdentifier\": { \"accountKey\": \"7013369000000000000\", \"cvc\": \"123\", \"expiryDate\": \"2019-12-31\", \"instrument\": \"GC\" } }' In this example USER is user and SECRET is secret. The plain text string to digest would then look like the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 POST /payment-api/api/payments/payment-account/balance user 21a0213e-30eb-85ab-b355-a310d31af30e 2019-06-18T09:19:15.208257Z { \"accountIdentifier\": { \"accountKey\": \"7013360000000000000\", \"cvc\": \"123\", \"expiryDate\": \"2020-12-31\", \"instrument\": \"CC\" } } The plain digest string is then hashed with HmacSHA512 algorithm and the SECRET. Finally we base 64 encode the hashed value. This is the final digest to be provided in the Hmac header. Final Hmac header value: 1 HmacSHA512 user:21a0213e-30eb-85ab-b355-a310d31af30e:oY5Q5Rf1anCz7DRm3GyWR0dvJDnhl/psylfnNCn6FA0NOrQS3L0fvyUsQ1IQ9gQPeLUt9J3IM2zwoSfZpDgRJA== Postman example script for generation HMAC header In pre-request script copy/paste the following snippet. JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 var user = 'Systemtest'; var secret = 'Systemtest'; var transmissionTime = (new Date()).toISOString(); var sessionId = guid(); var hmac = generateHMAC(user, secret, transmissionTime); console.log('hmac: ' + hmac); //Set header values pm.request.headers.add({key: 'Hmac', value: hmac }); pm.request.headers.add({key: 'Transmission-Time', value: transmissionTime }); pm.request.headers.add({key: 'Session-Id', value: sessionId }); function generateHMAC(user, secret, transmissionTime) { var algorithm = \"HmacSHA512\"; var separator = \":\"; var method = request.method.toUpperCase(); var nonce = generateNonce(); //UUID var date = transmissionTime; var uri_path = request.url.trim().replace(new RegExp('^https?://[^/]+/'), '/'); // strip hostname uri_path = uri_path.split(\"?\")[0]; //Remove query paramters var payload = _.isEmpty(request.data) ? \"\" : request.data; var macData = method + '\\n' + uri_path + '\\n' + user + '\\n' + nonce + '\\n' + date + '\\n' + payload + '\\n'; macData = replaceRequestEnv(macData); console.log('data to mac: ' + macData); var hash = CryptoJS.HmacSHA512(macData, secret); var digest = CryptoJS.enc.Base64.stringify(hash); return algorithm + \" \" + user + separator + nonce + separator + digest; } function replaceRequestEnv(input) { //manually set environments to they are populated before hashing return input.replace(/\\{\\{(.*?)\\}\\}/g, function (str, key) { var value = pm.environment.get(key); return value === null ? pm.varables.get(key) : value; }); } function generateNonce() { return guid(); } function guid() { function s4() { return Math.floor((1 + Math.random()) * 0x10000) .toString(16) .substring(1); } return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4(); } Security Documentation OAuth2 Client Credentials The RESTful CookBook: HMAC HMAC - Wikipedia Test client For more information how to implement the api, see Test Client.",
    "tags": "",
    "url": "/gift-cards/security.html"
  },{
    "title": "Secrets in payments",
    "text": "Don’t render this Payments have plenty of secrets due to it being secure and mostly encrypted. Only the end user and their bank can really see much data if any. We in between mostly see tokens.",
    "tags": "",
    "url": "/payments/secrets/super-secret.html"
  }]};
